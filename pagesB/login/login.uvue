<template>
	<t-page :scroll-disabled="true">
		<t-col main-class="bib-#71affc,#3a78ff h-50% df w-100%">
			<t-row main-class="twh-200 r-100 bibr-#fff,#3a78ff da o-0.2 dr-n30 dt-n30"></t-row>
			<t-row main-class="twh-100 r-100 bibr-#3a78ff,#fff da o-0.2 dr-300 dt-300"></t-row>
			<t-row main-class="twh-150 r-150 bibr-#3a78ff,#fff da o-0.2 dl-50 dt-100"></t-row>
			<t-image src="/static/my/wave.png" main-class="da dlbr-0 h-100 w-750"></t-image>
		</t-col>
		<t-col main-class="df dlt-0 twh-100% pt-200">
			<t-row main-class="fc" @click="weixinlogin">
				<t-icon name='cube' main-class="s-120 c-#fff"></t-icon>
			</t-row>
			<t-row main-class="fc h-100">
				<t-text :main-class="`mr-60 c-${state==1?'#fff':'#0055ff'} s-40 ${state==0?'sfwb':''}`"
					@click="setState(0)">登录</t-text>
				<t-text :bold="state==0?false:true"
					:main-class="`c-${state==1?'#0055ff':'#fff'} s-40 ${state==1?'sfwb':''}`"
					@click="setState(1)">注册</t-text>
			</t-row>
			<t-col main-class="tdb fc m-30 mt-80 p-80rpx 40rpx tdr">
				<t-icon name="close-circle-fill" main-class="da drt-30 s-45" @click="TuiAutoBack" type="i"></t-icon>
				<t-text type="p" main-class="mb-30 s-45 sfwb">{{state==0?'欢迎使用Tui':'快速注册'}}</t-text>
				<t-form ref="ruleForm" :rules="rules" main-class="w-100% tdr tdb" child-class="ptb-30 w-100%"
					rules-class="pl-20">
					<t-form-item label="用户名" prop="type" main-class="w-100%">
						<t-input main-class="f" v-model="(formData.username as string)" effect="plain" :border="false"
							placeholder="请输入用户名"></t-input>
					</t-form-item>
					<t-form-item label="密&emsp;码" prop="name">
						<t-input main-class="f" :eye="true" :password="true" v-model="(formData.password as string)"
							effect="plain" placeholder="请输入密码" :border="false"></t-input>
					</t-form-item>
					<t-form-item v-if="state==1" label="确认密码" prop="confirmPassword">
						<t-input :eye="true" placeholder="请再次输入密码" :password="true" main-class="f"
							v-model="(formData.confirmPassword as string)" effect="plain" :border="false"></t-input>
					</t-form-item>
					<t-row main-class="fc">
						<t-button main-class="mt-50 w-400 r-150" size="large" type="primary" loadingIcon="spinner"
							:icon-holder="true" :loading="loading" text="加载中"
							@click="submitForm">{{state==0?'登录':'注册'}}</t-button>
					</t-row>
				</t-form>
			</t-col>
		</t-col>
		<t-col main-class="fc df dlrb-0 p-30">
			<t-image @click="weixinlogin" main-class="twh-60" src="/pagesB/static/image/wx.png"></t-image>
			<t-text main-class="c-#666 slh-100" :patternsValue="['用户隐私协议']" mode="light" text="登录、注册代表您同意【用户隐私协议】"
				patternsColor="#2979ff">
			</t-text>
		</t-col>
	</t-page>
</template>

<script setup>
	import { loginPassword, loginPasswordResponse, sign, signResponse } from '@/api'
	import { TuiStore, sleep, TuiAutoBack, TuiCrypto } from '@/uni_modules/tui-plus'
	const store = new TuiStore()
	type formDataType = {
		username : string,
		password : string
		confirmPassword : string
	}
	let timer = 0
	const state = ref(0)
	const loading = ref<boolean>(false)
	const rules = ref<UTSJSONObject>({
		type: [{ type: 'required', message: '用户名不能为空' }],
		name: [{ type: 'required', message: '密码不能为空' }],
		confirmPassword: [{ type: 'required', message: '确认密码不能为空' }]
	})

	const ruleForm = ref<TFormComponentPublicInstance | null>(null)
	const formData = reactive<formDataType>({
		username: 'abctau',
		password: '123456',
		confirmPassword: ''
	} as formDataType)
	function weixinlogin() {
		// uni.login({
		// 	provider: 'weixin',
		// 	success: (e) => {
		// 		TuiApi('getWxAppUserinfo', { code: e.code }).then(res => {
		// 			login(`${res.getString('data.token')}`, res.getJSON('data.user'))
		// 			uni.showToast({
		// 				title: '登录成功',
		// 			})
		// 			clearTimeout(timer)
		// 			timer = setTimeout(() => {
		// 				loading.value = false
		// 				uni.navigateBack()
		// 				clearTimeout(timer)
		// 			}, 2000);
		// 		})
		// 	}
		// })
	}
	function setState(n : number) {
		loading.value = false
		state.value = n
	}
	function submitForm() {
		const validate : boolean = (ruleForm.value as TFormComponentPublicInstance).validate() as boolean
		if (validate) {
			if (state.value == 0) {
				loading.value = true
				const rsa = TuiCrypto.rsa
				sign().then((res : signResponse) => {
					rsa.setPublicKey(res.data.publicKey)
					const encrypted = rsa.encryptAsync(JSON.stringify({
						"username": formData.username,
						"password": formData.password,
					}))
					loginPassword({
						encrypted,
						privateId: res.data.privateId
					}).then(async (res : loginPasswordResponse) => {
						store.set('token', res.data.token)
						store.set('userinfo', res.data.user)
						uni.showToast({
							title: '登录成功',
						})
						await sleep(2000)
						loading.value = false
						TuiAutoBack.value(null)
					}).catch(async (err) => {
						uni.showToast({
							title: `${err}`
						})
						await sleep(2000)
						loading.value = false
						clearTimeout(timer)
					})
				})
			} else {
				if (formData.password == formData.confirmPassword) {
					// loginPassword({
					// 	code: TuiCrypto.encodeBase64(JSON.stringify({
					// 		"username": formData.username,
					// 		"password": formData.password,
					// 	}))
					// }).then((_ : loginPasswordResponse) => {
					// 	uni.showToast({ title: '注册成功' })
					// }).catch(err => {
					// 	uni.showToast({
					// 		icon: 'error',
					// 		title: `${err}`
					// 	})
					// })
				} else {
					uni.showToast({
						icon: 'error',
						title: '两次密码输入不一致'
					})
				}
			}
		}
	}
</script>