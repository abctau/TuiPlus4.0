<template>
	<t-page>
		<t-notify ref="notify"></t-notify>
		<introduction title='防抖'>
			<t-text type="info" size="small" main-class="tdb slh-50 tdr plr-20 ptb-12">
				事件被触发后，等待一段时间（延迟时间），如果在这段时间内没有再次触发该事件，则执行函数；如果在这段时间内再次触发了该事件，则重新计时。
			</t-text>
		</introduction>
		<introduction title="场景">
			<t-text type="info" size="small" main-class="tdb slh-50 tdr plr-20 ptb-12">
				常用于一个搜索框，用户在输入关键词时，我们希望在他们停止输入一段时间后才发送请求获取搜索结果。如果用户连续输入，我们就不发送请求，以避免不必要的网络请求。这时，防抖就非常有用。通过防抖，无论用户输入多快，我们都可以控制在他们停止输入后的指定时间间隔内（比如300毫秒）才发送一次请求。这样，就能有效地减少不必要的请求，提高应用的性能。
			</t-text>
		</introduction>
		<t-group title="效果演示" :border="false">
			<!-- <t-button type="p" :debounce="true" :tdTime="parseInt(list[curNow].title!)" @click="onClick">点击触发</t-button> -->
		</t-group>
		<t-section main-class="m-30" title="时间间隔"></t-section>
		<t-subsection :current="curNow" main-class="mlr-30 tdr tdb" type='p' size="medium">
			<t-subsection-item v-for="(item,index) in list" :icon="item.icon" :title="item.title" :key="index"
				:value="index"></t-subsection-item>
		</t-subsection>
	</t-page>
</template>

<script setup>
	const list = ref<UTSJSONObject[]>([{
		title: '1000'
	}, {
		title: '2000'
	}, {
		title: '5000'
	}] as UTSJSONObject[])
	const curNow = ref(1)
	const notify = ref<TNotifyComponentPublicInstance | null>(null)
	function onClick() {
		uni.showToast({
			title: '事件被执行'
		})
	}
</script>