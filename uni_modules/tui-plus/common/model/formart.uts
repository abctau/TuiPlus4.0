import { isNumber } from './test'
const SECOND = 1000
const MINUTE = 60 * SECOND
const HOUR = 60 * MINUTE
const DAY = 24 * HOUR
export function priceFormat(price : string, decimals : number = 0, thousandsSeparator : string = ',', decimalPoint : string = '￥') : string {
	try {
		const num : string = price.replace(/[^0-9+-Ee.]/g, '')
		const n : string = isFinite(parseFloat(num)) ? num : '0'
		const arr : Array<string> = n.split('.')
		const p : string = arr[0]
		let par : Array<string> = [];
		for (let i : number = p.length; i > 0; i -= 3) {
			let start : number = i - 3
			const item : string = p.substring(start, i)

			par.unshift(item);
		}
		let pjo : string = par.join(thousandsSeparator)
		if (decimals > 0) {
			let angle : string = ''
			if (arr.length > 1) {
				angle = arr[1].substring(0, decimals)
			}
			let anglen = angle.length
			if (anglen < decimals) angle = angle.padEnd(decimals, '0');
			pjo += `.${angle}`
		}
		return `${decimalPoint}${pjo}`
	} catch (e) {
		return price
	}

}
export function sensitiveWordFilter(name : string, decimalPoint : string = '*') : string {
	let val : string
	if (name.length == 2) {
		val = name.substring(0, 1) + decimalPoint
	} else if (name.length > 2) {
		let char = ''
		for (let i : number = 0, len : number = name.length - 2; i < len; i++) {
			char += decimalPoint
		}
		val = name.substring(0, 1) + char + name.substring(name.length - 1, name.length)
	} else {
		val = name
	}
	return val
}


/** 
 * 大写金额
 * 
 * @param {String} money
 * @returns {String}
 */
export function upperMoney(money : string) : string {
	if (money == '') {
		return ''
	}

	// 汉字的数字
	let cnNums = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖']
	// 基本单位
	let cnIntRadice = ['', '拾', '佰', '仟']
	// 对应整数部分扩展单位
	let cnIntUnits = ['', '万', '亿', '兆']
	// 对应小数部分单位
	let cnDecUnits = ['角', '分', '毫', '厘']
	// 整数金额时后面跟的字符
	let cnInteger = ''
	// 整型完以后的单位
	let cnIntLast = '元'
	// 最大处理的数字
	let maxNum = 999999999999999.9999
	// 金额整数部分
	let integerNum : string
	// 金额小数部分
	let decimalNum : string
	// 输出的中文金额字符串
	let chineseStr = ''
	// 分离金额后用的数组，预定义
	let parts : string[]

	let _money = parseFloat(money.toString())
	// 超出最大处理数字
	if (_money >= maxNum) {
		return ''
	}

	if (_money == 0) {
		return `${cnNums[0]}${cnIntLast}${cnInteger}`
	}

	// 转换为字符串
	if (money.indexOf('.') == -1) {
		integerNum = money
		decimalNum = ''
	} else {
		parts = money.split('.')
		integerNum = parts[0]
		decimalNum = parts[1].substring(0, 4)
	}

	// 获取整型部分转换
	if (parseInt(integerNum, 10) > 0) {
		let zeroCount = 0
		let len = integerNum.length

		for (let i = 0; i < len; i++) {
			let n = integerNum.substring(i, i + 1)
			let p = len - i - 1
			let q = p / 4
			let m = p % 4
			if (n == '0') {
				zeroCount++
			} else {
				if (zeroCount > 0) {
					chineseStr += cnNums[0]
				}

				// 归零
				zeroCount = 0
				chineseStr += cnNums[parseInt(n)] + cnIntRadice[m]
			}
			if (m == 0 && zeroCount < 4) {
				chineseStr += cnIntUnits[q]
			}
		}

		chineseStr += cnIntLast
	}

	// 小数部分
	if (decimalNum != '') {
		let decLen = decimalNum.length
		for (let i = 0; i < decLen; i++) {
			let n = decimalNum.substring(i, i + 1)
			if (n != '0') {
				let index = parseInt(n)
				chineseStr += (cnNums[index] + cnDecUnits[i])
			}
		}
	}

	if (chineseStr == '') {
		chineseStr += cnNums[0] + cnIntLast + cnInteger
	} else if (decimalNum == '') {
		chineseStr += cnInteger
	}

	return chineseStr
}

/** 
 * 格式化金额
 * 
 * @param {String} money
 * @param {Boolean} wfz true 万分制 false 千分制
 * @returns {String}
 */
export function fmtMoney(money : string, wfz : boolean) : string {
	try {
		let fIndex = wfz ? 4 : 3

		if (fIndex == 3) {
			let str = money.toString()
			if (str.indexOf('.') == -1) {
				return str.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,')
			} else {
				let strs = str.split('.')
				let val = strs[0].replace(/(\d)(?=(?:\d{3})+$)/g, '$1,')

				for (let i = 1; i < strs.length; i++) {
					val += '.' + strs[i]
				}

				return val
			}
		} else {
			let str = money.toString()

			if (str.indexOf('.') == -1) {
				return str.replace(/(\d)(?=(?:\d{4})+$)/g, '$1,')
			} else {
				let strs = str.split('.')
				let val = strs[0].replace(/(\d)(?=(?:\d{4})+$)/g, '$1,')

				for (let i = 1; i < strs.length; i++) {
					val += '.' + strs[i]
				}

				return val
			}
		}
	} catch (e) {
		console.log(e);
	}

	return money.toString()
}

// 时间戳转时间距离现在的时间
export function diffdate(time : number) : string {
	let now = new Date().getTime()
	let t = now - time
	if (t < 60 * 1000) {
		return '刚刚'
	} else if (t < 60 * 60 * 1000.0) {
		return Math.floor(t / (60 * 1000.0)) + '分钟前'
	} else if (t < 24 * 60 * 60 * 1000.0) {
		return Math.floor(t / (60 * 60 * 1000.0)) + '小时前'
	} else if (t < 30 * 24 * 60 * 60 * 1000.0) {
		return Math.floor(t / (24 * 60 * 60 * 1000.0)) + '天前'
	} else if (t < 12 * 30 * 24 * 60 * 60 * 1000.0) {
		console.log(t)
		console.log(12 * 30 * 24 * 60 * 60 * 1000.0)
		console.log(30 * 24 * 60 * 60 * 1000.0)
		console.log(Math.floor(t / (30 * 24 * 60 * 60 * 1000.0)))
		return Math.floor(t / (30 * 24 * 60 * 60 * 1000.0)) + '月前'
	} else {
		return Math.floor(t / (12 * 30 * 24 * 60 * 60 * 1000.0)) + '年前'
	}
}
// 时间戳转日期时分秒
export function timeToDate(time : number) : string {
	let date = new Date(time)
	let year = date.getFullYear()
	let month = date.getMonth() + 1
	let day = date.getDate()
	let hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()
	let minute = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()
	let second = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()
	return `${year} -${month} -${day} ${hour}:${minute}:${second} `
}

export function dateFormat(formatStr : string, timeSource : Map<string, string>) : string {
	let f : string = formatStr
	timeSource.forEach((value, key) => {
		const ret = new RegExp(`${key}+`).exec(formatStr)
		if (ret != null) {
			const itemVal : string = ret[0].toString()
			let beginIndex : number = 0
			if (key == 'y' && itemVal.length == 2) {
				beginIndex = 2
			}
			const t : string = value.slice(beginIndex)
			f = f.replace(itemVal, t)
		}
	})
	return f
}
export function timeFormat(dateTime : string = '', formatStr : string = 'yyyy-mm-dd') : string {
	try {
		let date : Date
		if (dateTime == '') {
			date = new Date()
		} else if (isNumber(dateTime)) {
			if (dateTime.length == 10) {
				const str : string = dateTime + '000'
				date = new Date(parseInt(str))
			} else if (dateTime.length == 13) {
				date = new Date(parseInt(dateTime))
			} else {
				date = new Date()
			}
		} else {
			date = new Date(dateTime)
		}
		const fillhandl = (num : number) : string => {
			return num.toString().padStart(2, '0');
		}
		let timeSource = new Map<string, string>()
		timeSource.set('y', fillhandl(date.getFullYear()))
		timeSource.set('m', fillhandl(date.getMonth() + 1))
		timeSource.set('d', fillhandl(date.getDate()))
		timeSource.set('h', fillhandl(date.getHours()))
		timeSource.set('M', fillhandl(date.getMinutes()))
		timeSource.set('s', fillhandl(date.getSeconds()))
		return dateFormat(formatStr, timeSource)
	} catch (e) {
		return dateTime
	}
}

export function parseTimeData(time : number, formatStr : string = 'hh:MM:ss') : string {
	function fill(num : number, len : number = 2) : string {
		let t : string = '000' + num
		return t.slice(-len)
	}
	let timeSource = new Map<string, string>()
	timeSource.set('d', fill(Math.floor(time / DAY)))
	timeSource.set('h', fill(Math.floor((time % DAY) / HOUR)))
	timeSource.set('M', fill(Math.floor((time % HOUR) / MINUTE)))
	timeSource.set('s', fill(Math.floor((time % MINUTE) / SECOND)))
	timeSource.set('S', fill(Math.floor(time % SECOND), 3))
	return dateFormat(formatStr, timeSource)
}

export function objTimeData(time : number) : UTSJSONObject {
	const days = Math.floor(time / DAY)
	const hours = Math.floor((time % DAY) / HOUR)
	const minutes = Math.floor((time % HOUR) / MINUTE)
	const seconds = Math.floor((time % MINUTE) / SECOND)
	const milliseconds = Math.floor(time % SECOND)
	return {
		days,
		hours,
		minutes,
		seconds,
		milliseconds
	} as UTSJSONObject
}


