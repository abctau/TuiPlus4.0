<template>
	<t-view v-bind="extendsAttrs" :main-class="`oh ${extendsRadius} ${mainClass}`">
		<t-button v-if="title!=''" v-bind="extendsAttrs" :main-class="`r-0 fjcs ${titleClass}`"
			text-class="sfwb">{{title}}</t-button>
		<t-view :main-class="`${extendsPadding} tvg ${contentClass}`">
			<slot></slot>
		</t-view>
	</t-view>
</template>

<script setup>
	/**
	 * Group 分组
	 * @date 2025-05-31 12:03:57
	 * @author TanYuan
	 * @description 结构化的布局容器，用于将相关内容组织在一起，支持自定义标题、边框、以及内容和标题的样式，便于在页面中清晰地区分和展示不同模块的信息。
	 * @example /pagesA/layout/group/group
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-group.html
	 * @example /pagesA/layout/group/group
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} title 标题文本
	 * @property {String} titleClass 标题文本样式
	 * @property {String} contentClass 内容样式
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface GroupProps extends CommonProps {
		title : string
		titleClass : string
		contentClass : string
	}
	const props = withDefaults(defineProps<GroupProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		title: '',
		titleClass: '',
		contentClass: ''
	});
	const { extendsAttrs, extendsRadius, extendsPadding } = useTuiThemes(props)
</script>