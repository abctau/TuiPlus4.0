<template>
	<t-view v-bind="extendsAttrs" :main-class="gridItemStyles" @click="mainOnclick">
		<slot>
			<t-icon v-if="icon!=''" :size="gridItemSize" :main-class="gridItemIconStyles" :type="gridItemType"
				:name="icon"></t-icon>
			<t-text v-if="label!=''" :size="gridItemSize" :main-class="gridItemLabelStyles" type="info"
				:text="label"></t-text>
		</slot>
		<slot name="badge">
			<t-badge v-if="badge" v-bind="badgeAttrs"></t-badge>
		</slot>
	</t-view>
</template>
<script setup>
	/**
	 * GridItem 宫格子组件
	 * @date 2025-05-31 12:03:54
	 * @author TanYuan
	 * @description 宫格子组件
	 * @example /pagesA/layout/grid/grid
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-grid-item.html
	 * @example /pagesA/layout/grid/grid
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @value true 是
	 * @value false 否
	 * @property {String} icon 图标(默认：photo)
	 * @property {String} iconClass 图标样式
	 * @property {String} label 显示文本
	 * @property {String} labelClass 显示文本样式
	 * @property {Boolean} badge 是否显示徽标(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {UTSJSONObject} badgeAttrs 徽标的属性配置。支持徽标组件的所有属性(默认：{})
	 * @event {Function} click 点击时触发
	 */
	import { GridGroupAttrsType, useTuiThemes, CommonProps } from '../../common/props/index.uts';
	import { getStyleProperty } from '../../common/model/style'
	import { getPx } from '../../common/model/util'

	interface GridItemProps extends CommonProps {
		icon : string;
		iconClass : string;
		label : string;
		labelClass : string;
		badge : boolean;
		badgeAttrs : UTSJSONObject;
	}
	const props = withDefaults(defineProps<GridItemProps>(), {
		path: '',
		hover: true,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		icon: 'photo',
		iconClass: '',
		label: '',
		labelClass: '',
		badge: true,
		badgeAttrs: {} as UTSJSONObject,
	});

	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['click'])
	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (props.path != '') {
			uni.navigateTo({
				url: props.path,
				fail: (_) => {
					uni.switchTab({
						url: props.path
					})
				}
			})
		} else {
			emit('click', e)
		}
	}
	const gridGroupAttrs = inject<GridGroupAttrsType>('gridGroupAttrs')
	const gridItemLabelStyles = computed(() : string => {
		return `mt-20 ${gridGroupAttrs?.childLabelClass?.value ?? ''} ${props.labelClass}`
	})

	const gridItemIconStyles = computed(() : string => {
		return `${gridGroupAttrs?.childIconClass?.value ?? ''} ${props.iconClass}`
	})
	const gridItemSize = computed(() : string => {
		return props.size == 'm' ? props.size : gridGroupAttrs?.size?.value ?? 'm'
	})
	const gridItemType = computed(() : string => {
		return props.type == '' ? gridGroupAttrs?.type?.value ?? '' : ''
	})
	const gridItemStyles = computed(() : string => {
		const column : number = gridGroupAttrs?.column?.value ?? 4
		const childClass : string = gridGroupAttrs?.childClass?.value ?? ''
		return `tdp-${gridItemSize.value},,tb fv fc ${childClass} ${props.mainClass} w-${(100 / column).toFixed(2)}%`
	})
</script>