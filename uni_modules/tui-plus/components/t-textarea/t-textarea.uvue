<template>
	<t-col v-bind="extendsAttrs" :main-class="`${extendsPrb} dr hs-240 ${border?extendsBorder:''} ${mainClass}`"
		@click="textareaClick">
		<textarea :id="inputGuid" :name="name" :placeholder="placeholder" :placeholder-style="inputPlaceholderStyle"
			:placeholder-class="placeholderClass" :maxlength="maxlength" :cursor-spacing="cursorSpacing"
			:cursor-color="getForegColorToValue" :auto-focus="autoFocus" :focus="inputFocus" :confirm-type="confirmType"
			:confirm-hold="confirmHold" :cursor="cursor" :selection-start="selectionStart" :selection-end="selectionEnd"
			:adjust-position="adjustPosition" :hold-keyboard="holdKeyboard" :inputmode="inputmode" :value="inputValue"
			:autoHeight="autoHeight" @input="input" @focus="onfocus" @blur="blur"
			@keyboardheightchange="keyboardheightchange" @confirm="confirm" @linechange="linechange"
			:style="[themeForegroundColor,themeFontSize,inputStyles]" />
		<t-row :main-class="`faic da dlbr-0 ${extendsPadding}`">
			<t-row main-class="f">
				<t-text :main-class="`${extendsSfc}`"
					v-if="maxlength>0 && count">{{inputValue.length}}/{{maxlength}}</t-text>
			</t-row>
			<t-icon v-if="clearabled" :name="clearIcon"
				:main-class="`ml-15 mt-1px ats-1.3 ${extendsSfc} ${clearClass} ${clearVisibility}`" @click="clear"
				:hover="true"></t-icon>
		</t-row>
	</t-col>
</template>

<script setup>
	/**
	 * Textarea 文本域
	 * @date 2025-05-31 12:08:09
	 * @author TanYuan
	 * @description 于输入多行文本的组件，支持多种配置，包括自动增高、光标颜色、选择文本等。
	 * @example /pagesA/form/textarea/textarea
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-textarea.html
	 * @example /pagesA/form/textarea/textarea
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认：plain)
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Boolean} count 是否显示字数统计
	 * @value true 是
	 * @value false 否
	 * @property {String} modelValue 绑定的值
	 * @property {String} clearIcon 清除按钮的图标名称(默认：closes-circle-line)
	 * @property {String} clearClass 清除按钮图标样式
	 * @property {String} inputClass 输入框样式
	 * @property {Boolean} clearabled 是否显示清除按钮(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} border 是否显示边框
	 * @value true 是
	 * @value false 否
	 * @property {String} name 表单的控件名称  和官方表单组件配合使用，
	 * @property {Boolean} password 是否密码显示
	 * @value true 是
	 * @value false 否
	 * @property {String} placeholder 输入框为空时占位文本
	 * @property {String} placeholderStyle 指定 placeholder 的样式
	 * @property {String} placeholderClass 指定 placeholder 的样式类
	 * @property {Number} maxlength 最大输入长度(默认：1)
	 * @property {Number} cursorSpacing 指定光标与键盘的距离
	 * @property {String} cursorColor 指定光标颜色
	 * @property {Boolean} autoFocus 自动获取焦点
	 * @value true 是
	 * @value false 否
	 * @property {String} confirmType=[return|send|search|next|go|done] 设置键盘右下角按钮的文字(默认：done)
	 * @value return 换换行
	 * @value send 发送
	 * @value search 搜索
	 * @value next 下一个
	 * @value go 前往
	 * @value done 完成
	 * @property {Boolean} confirmHold 点击键盘右下角按钮时是否保持键盘不收起
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} autoHeight 是否自动增高，设置auto-height时，style.height不生效(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Number} cursor 指定 focus 时的光标位置
	 * @property {Number} selectionStart 光标起始位置(默认：1)
	 * @property {Number} selectionEnd 光标结束位置(默认：1)
	 * @property {Boolean} adjustPosition 键盘弹起时，是否自动上推页面(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} holdKeyboard focus 时，点击页面的时候不收起键盘
	 * @value true 是
	 * @value false 否
	 * @property {String} inputmode=[none|text|decimal|numeric|tel|search|email|url] 是一个枚举属性，它提供了用户在编辑元素或其内容时可能输入的数据类型的提示。在符合条件的高版本webview里，uni-app的 web 和 app-vue 平台中可使用本属性。(默认：text)
	 * @value none 无虚拟键盘。在应用程序或者站点需要实现自己的键盘输入控件时很有用。
	 * @value text 使用用户本地区域设置的标准文本输入键盘。
	 * @value decimal 小数输入键盘，包含数字和分隔符（通常是“ . ”或者“ , ”），设备可能也可能不显示减号键。
	 * @value numeric 数字输入键盘，所需要的就是 0 到 9 的数字，设备可能也可能不显示减号键。
	 * @value tel 电话输入键盘，包含 0 到 9 的数字、星号（*）和井号（#）键。表单输入里面的电话输入通常应该使用 <input type="tel"> 。
	 * @value search 为搜索输入优化的虚拟键盘，比如，返回键可能被重新标记为“搜索”，也可能还有其他的优化。
	 * @value email 为邮件地址输入优化的虚拟键盘，通常包含""符号和其他优化。表单里面的邮件地址输入应该使用 <input type="email"> 。
	 * @value url 为网址输入优化的虚拟键盘，比如，“/”键会更加明显、历史记录访问等。表单里面的网址输入通常应该使用 <input type="url"> 。
	 * @property {Boolean} showScrollbar showScrollbar是否显示滚动条(默认：true)
	 * @value true 是
	 * @value false 否
	 * @event {Function} click 点击时触发
	 * @event {Function} input 当键盘输入时触发
	 * @event {Function} blur 输入框失去焦点时触发
	 * @event {Function} focus 输入框聚焦时触发
	 * @event {Function} keyboardheightchange 键盘高度发生变化时触发
	 * @event {Function} confirm 点击完成时触发
	 * @event {Function} linechange 输入框行数变化时调用
	 * @event {Function} update:modelValue undefined
	 * @event {Function} clear 清除文本时触发
	 */
	import { useStyle } from '../../common/model/style'
	import { TuiGuid } from '../../common/model/util'
	import { c } from '../../common/model/theme'
	// #ifdef APP-ANDROID
	import AppCompatEditText from "androidx.appcompat.widget.AppCompatEditText"
	// #endif
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface TextareaProps extends CommonProps {
		count : boolean;
		modelValue : string;
		clearIcon : string;
		clearClass : string;
		inputClass : string;
		clearabled : boolean;
		border : boolean;
		name : string;
		password : boolean;
		placeholder : string;
		placeholderStyle : string;
		placeholderClass : string;
		maxlength : number;
		cursorSpacing : number;
		cursorColor : string;
		autoFocus : boolean;
		focus : boolean;
		confirmType : string;
		confirmHold : boolean;
		autoHeight : boolean;
		cursor : number;
		selectionStart : number;
		selectionEnd : number;
		adjustPosition : boolean;
		holdKeyboard : boolean;
		inputmode : string;
		showScrollbar : boolean;
	}

	const props = withDefaults(defineProps<TextareaProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		count: false,
		modelValue: "",
		clearIcon: 'closes-circle-line',
		clearClass: '',
		inputClass: '',
		clearabled: true,
		border: false,
		name: '',
		password: false,
		placeholder: '',
		placeholderStyle: '',
		placeholderClass: '',
		maxlength: -1,
		cursorSpacing: 0,
		cursorColor: '',
		autoFocus: false,
		focus: false,
		confirmType: 'done',
		confirmHold: false,
		autoHeight: true,
		cursor: 0,
		selectionStart: -1,
		selectionEnd: -1,
		adjustPosition: true,
		holdKeyboard: false,
		inputmode: 'text',
		showScrollbar: true
	});

	const { extendsAttrs, extendsPrb, extendsBorder, getForegColorToValue, themeForegroundColor, themeFontSize, extendsSfc, extendsPadding } = useTuiThemes(props)
	const emit = defineEmits(['update:modelValue', 'clear', 'click', 'input', 'blur', 'focus', 'keyboardheightchange', 'confirm', 'linechange'])
	const instance = getCurrentInstance()?.proxy!
	const inputValue = ref<string>('')
	const inputFocus = ref<boolean>(false)
	const inputGuid = ref<string>(`tui${TuiGuid(15)}`)
	const itemValidate = inject<() => void>('itemValidate', () => { })
	const clearVisibility = computed(() : string => {
		return inputValue.value.length > 0 ? 'ovy' : 'ovy-h'
	})
	const inputPlaceholderStyle = computed(() : string => {
		return `opacity:0.8;${themeForegroundColor.value}${useStyle(props.placeholderStyle)}`
	})
	const inputStyles = computed(() : string => {
		return useStyle(`${props.inputClass}`)
	})

	function textareaClick(e : UniPointerEvent) {
		inputFocus.value = true
	}
	function linechange(e : UniTextareaLineChangeEvent) {
		emit('linechange', e)
	}
	function onfocus(e : UniTextareaFocusEvent) {
		emit('focus', e)
	}
	function blur(e : UniTextareaBlurEvent) {
		inputFocus.value = false
		emit('blur', e)
		itemValidate()
	}
	function keyboardheightchange(e : UniInputKeyboardHeightChangeEvent) {
		emit('keyboardheightchange', e)
	}
	function confirm(e : UniInputConfirmEvent) {
		emit('confirm', e)
	}
	function clear() {
		emit('clear')
		inputValue.value = ''
		emit('update:modelValue', '')
		nextTick(() => {
			itemValidate()
		})
	}
	function input(e : UniInputEvent) {
		inputValue.value = e.detail.value
		emit('update:modelValue', e.detail.value)
		emit('input', e)
	}

	onMounted(() => {
		// #ifdef APP-ANDROID
		if (!props.showScrollbar) {
			const textareaElement = uni.getElementById(inputGuid.value)
			if (textareaElement != null) {
				const editText = textareaElement.getAndroidView<AppCompatEditText>()
				editText?.setVerticalScrollBarEnabled(false)
				editText?.setHorizontalScrollBarEnabled(false)
			}
		}
		// #endif
	})

	watch(() : boolean => props.focus, (val : boolean) => {
		inputFocus.value = val
	}, { immediate: true })

	watch(() : string => props.modelValue, (val : string) => {
		if (inputValue.value != val) inputValue.value = val
	}, { immediate: true })
</script>