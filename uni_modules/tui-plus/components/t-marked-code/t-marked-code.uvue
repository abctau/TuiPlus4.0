<template>
	<t-view v-bind="extendsAttrs" :main-class="`tdr bg-#252526  ${mainClass}`">
		<t-view main-class="fl fjcb h-50 faic bg-#37373d">
			<t-text main-class="c-#999 s-12px mt-n6 ml-20" size="mini">{{language}}</t-text>
			<t-text v-if="!supportHighlight">注意：当前语言不支持高亮显示</t-text>
			<t-view @click="copyCode">
				<t-text main-class="c-#999 mr-20 ocr" size="mini">复制代码</t-text>
			</t-view>
		</t-view>
		<t-scroll direction="horizontal" :main-class="`p-20 ${scrollClass}`">
			<text class="code" :style="markedCodeStyle">
				<template v-for="(token,index) in tokensLines" :key="index">
					<text :selectable="true" :class="['code',token.className]">
						{{token.text}}
					</text>
				</template>
			</text>
		</t-scroll>
	</t-view>
</template>

<script setup>	/**
	 * MarkedCode 代码高亮
	 * @date 2025-08-14 19:28:10
	 * @author TanYuan
	 * @description t-marked子组件，用于展示markdown代码片段，支持亮高显示，可单独使用,非webview套壳
	 * @example /pagesA/layout/marked-code/marked-code.uvue
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-marked-code.html
	 * @example /pagesA/layout/marked-code/marked-code.uvue
	 * @property {String} size=[large|medium|small|mini] 组件尺寸 (默认:medium)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型 (默认: "")
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果（点击组件透明度0.7）(默认: false)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} codeText 代码字符串
	 * @property {String} language=[javascript|python|typescript|javascriptReact|html|css|cpp|dart|go|java|lua|php|r|sql|jsonc|jsonl|c|cuda-cpp|xml|xsl] 字符串解析语言类型(默认：javascript)
	 * @value javascript 
	 * @value python 
	 * @value typescript 
	 * @value javascriptReact 
	 * @value html 
	 * @value css 
	 * @value cpp 
	 * @value dart 
	 * @value go 
	 * @value java 
	 * @value lua 
	 * @value php 
	 * @value r 
	 * @value sql 
	 * @value jsonc 
	 * @value jsonl 
	 * @value c 
	 * @value cuda-cpp 
	 * @value xml 
	 * @value xsl 
	 * @property {String} contentClass 内容区盒子样式
	 * @property {String} scrollClass 内容区滚动组件样式
	 */
	
	import { createHighLighter, HighLighterOptions, CreateHighLighterRes, ILineTokens } from "@/uni_modules/uni-highlight"
	import { useGrammar } from "./grammar.uts"
	import { CommonProps, useTuiThemes } from "../../common/props/index.uts";
	import { useStyle } from "../../common/model/style.uts";
	interface MarkedCodeProps extends CommonProps {
		codeText : string
		language : string
		contentClass : string
		scrollClass : string
	}
	const props = withDefaults(defineProps<MarkedCodeProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		codeText: '',
		language: 'javascript',
		contentClass: '',
		scrollClass: ''
	});
	const { extendsAttrs } = useTuiThemes(props)
	const supportHighlight = ref<boolean>(true)
	const tokensLines = ref<UTSJSONObject[]>([])
	const marktexttest = ref("\n\t5456456")
	const markedCodeStyle = computed(() : string => {
		return useStyle(props.contentClass)
	})
	useGrammar(props.language).then(async (grammar : UTSJSONObject | null) => {
		if (grammar != null) {
			const options = {
				languages: {} as UTSJSONObject
			} as HighLighterOptions
			options.languages.set(props.language, grammar)
			let uniCodeHighlighter = await createHighLighter(options)
			const tokens = [] as Array<UTSJSONObject>
			const iLineToken : ILineTokens | null = await uniCodeHighlighter!.tokenizeLine(props.language, props.codeText, 0)
			iLineToken?.tokens.forEach((tk) => {
				const tx = props.codeText.substring(tk.startIndex, tk.endIndex)
				tokens.push({
					text: tx,
					className: tk.scopes[tk.scopes.length - 1].split(".")[0]
				})
			})
			tokensLines.value = tokens
		}
	})
	function copyCode() {
		uni.setClipboardData({
			data: props.codeText,
			success: () => {
				uni.showToast({
					title: '代码已复制到剪贴板',
					icon: 'success'
				})
			},
			fail: () => {
				uni.showToast({
					title: '复制失败',
					icon: 'none'
				})
			}
		})
	}
</script>
<style>
	.code {
		white-space: normal;
		width: auto;
	}

	.source {
		/* width: 100%; */
	}

	.keyword {
		color: #569cd6;
	}

	.string {
		color: #ce9178;
	}

	.comment {
		color: #999;
	}

	.meta {
		width: 10rpx;
	}

	.text {
		color: #fff;
	}

	.storage {
		color: #569cd6;
	}

	.eol {
		/* #ifndef APP */
		white-space: pre;
		/* #endif */
	}

	.entity {
		color: #4ec9b0;
	}

	.support {
		color: #4ec9b0;
	}

	.constant {
		color: #b5cea8;
	}

	.variable {
		color: #9cdcfe;
	}

	.punctuation {
		color: #d4d4d4;
	}

	.function {
		color: #dcdcaa;
	}
</style>