<template>
	<t-text v-bind="extendsAttrs" :text="numberText" :decimals="decimals"></t-text>
</template>
<script setup>
	/**
	 * RollingNumber 滚动数字
	 * @date 2025-05-31 12:06:22
	 * @author TanYuan
	 * @description RollingNumber 是一个用于显示数字滚动动画的组件，支持多种配置，包括滚动模式、开始数值、目标数值、动画持续时间、是否自动播放和小数位数等。
	 * @example /pagesA/basics/count-to/count-to
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-rolling-number.html
	 * @example /pagesA/basics/count-to/count-to
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Number} startVal 开始的数值(默认：1000)
	 * @property {Number} endVal 要滚动的目标数值(默认：2000)
	 * @property {Number} duration 滚动到目标数值的动画持续时间，单位为毫秒（ms）(默认：500)
	 * @property {Boolean} autoplay 是否自动播放(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Number} decimals 小数位数(默认：1)
	 */
	import { getRandomInt, generateRandomNumber } from '../../common/model/util'
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface RollingNumberProps extends CommonProps {
		startVal : number
		endVal : number
		duration : number
		autoplay : boolean
		decimals : number
	}
	const props = withDefaults(defineProps<RollingNumberProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		startVal: 1000,
		endVal: 2000,
		duration: 500,
		autoplay: true,
		decimals: 0,
	});
	const { extendsAttrs } = useTuiThemes(props)
	const numberText = ref<string>('0')
	let timer : number = 0
	const paused = ref<boolean>(false)
	function stops() {
		numberText.value = props.endVal.toFixed(props.decimals).toString()
		clearInterval(timer)
	}
	function countAnimation() {
		const step : number = props.endVal / (props.duration / 10)
		timer = setInterval(() => {
			if (!paused.value) {
				const s : number = getRandomInt(0, step)
				const count : number = parseFloat(numberText.value) + s
				if (count >= props.endVal) {
					stops()
				} else {
					numberText.value = (count + generateRandomNumber(props.decimals) / 100).toFixed(props.decimals).toString()
				}
			}
		}, 10)
	}
	function start() {
		clearInterval(timer)
		paused.value = false
		numberText.value = props.startVal.toString()
		countAnimation()
	}
	function pause() {
		if (!paused.value) {
			paused.value = true
			clearInterval(timer)
		}

	}
	function continues() {
		if (paused.value) {
			clearInterval(timer)
			paused.value = false
			countAnimation()
		}
	}
	onMounted(() => {
		if (props.autoplay) start()
	})
	onUnmounted(() => {
		clearInterval(timer)
	})
	defineExpose({
		start,
		pause,
		continues,
		stops
	})
</script>