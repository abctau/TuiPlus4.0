<template>
	<!-- #ifdef MP-WEIXIN -->
	<view class='tui-animation-main' :animation="animationData" :style="animationStyles" @transitionend="transitionend"
		@click="mainOnclick">
		<slot></slot>
	</view>
	<!-- #endif -->
	<!-- #ifndef MP-WEIXIN -->
	<view class='tui-animation-main' :style="animationStyles" @click="mainOnclick">
		<slot></slot>
	</view>
	<!-- #endif -->
</template>

<script setup>
	/**
	 * Animation 动画组件
	 * @date 2025-05-31 13:22:38
	 * @author TanYuan
	 * @description 弥补X环境没有uni.createAnimation动画支持，本组件，支持IOS，安卓 小程序 WEB 鸿蒙，使用简单
	 * @example /pagesA/basics/animation/animation.uvue
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-animation.html
	 * @example /pagesA/basics/animation/animation.uvue
	 * @property {String} size=[large|medium|small|mini] 组件尺寸 (默认:medium)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型 (默认: "")
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果（点击组件透明度0.7）(默认: false)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @event {Function} transitionend 动画结束事件
	 * @event {Function} click 点击时触发
	 * @event {Function} initFinished 初始化完成事件 返回组件的节点信息
	 */
	import { useStyle } from '../../common/model/style';
	import { getDomRect } from '../../common/model/util';
	import { TuiAnimation } from '../../common/model/animation'
	import { CommonProps } from '../../common/props/index.uts';
	const animationData = ref({})
	const animation = ref<TuiAnimation | null>(null)
	const timer = ref<number>(0)
	const instance = getCurrentInstance()?.proxy!
	const props = withDefaults(defineProps<CommonProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		touchStop: false
	});

	const animationStyles = computed(() : string => useStyle(props.mainClass))

	const emit = defineEmits(['click', 'transitionend', 'initFinished'])
	function transitionend(e : UniEvent) {
		// #ifdef MP-WEIXIN
		clearTimeout(timer.value)
		timer.value = setTimeout(() => {
			emit('transitionend')
		}, 500);
		// #endif
	}
	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (props.path != '') {
			uni.navigateTo({
				url: props.path,
				fail: (_) => {
					uni.switchTab({
						url: props.path
					})
				}
			})
		} else {
			emit('click', e)
		}
	}
	function getInfo(callback : (e : NodeInfo) => void) {
		getDomRect('.tui-animation-main', instance).then((rect : NodeInfo) => {
			callback(rect)
		})
	}
	function createAnimation(e : UTSJSONObject) : TuiAnimation {
		if (animation.value == null) {
			const option = {
				duration: e.getNumber('duration') ?? 400,
				timingFunction: e.getString('timingFunction') ?? "linear",
				delay: e.getNumber('delay') ?? 0,
				transformOrigin: e.getString('transformOrigin') ?? "50% 50% 0"
			}
			// #ifdef MP-WEIXIN
			animation.value = wx.createAnimation(option)
			// #endif
			// #ifndef MP-WEIXIN
			const domEle : UniElement = instance.$el as UniElement
			animation.value = new TuiAnimation(domEle, option)
			animation.value!.onTranSitionEnd(() => {
				emit('transitionend')
			})
			// #endif
		}
		// #ifndef MP-WEIXIN
		animation.value!.reset()
		// #endif
		return animation.value!
	}

	function exports() : void {
		// #ifdef MP-WEIXIN
		animationData.value = {}
		nextTick(() => {
			animationData.value = animation.value.export()
		})
		// #endif
		// #ifndef MP-WEIXIN
		animation.value?.export()
		// #endif
	}

	onMounted(() => {
		nextTick(() => {
			getInfo((rect : NodeInfo) => {
				emit('initFinished', rect)
			})
		})
	})
	onUnmounted(() => {
		clearTimeout(timer.value)
	})
	defineExpose({
		getInfo,
		createAnimation,
		exports
	})
</script>