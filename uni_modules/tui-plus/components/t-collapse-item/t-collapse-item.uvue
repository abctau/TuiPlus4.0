<template>
	<t-view v-bind="extendsAttrs" :main-class="`fv ${cellMainClass}`">
		<t-cell :icon="icon" :icon-class="mergeIconClass" :effect="getPartenEffect" :type="getPartenType" :title="title"
			:desc="label" @click="apse" :desc-class="mergeLabelClass"
			:right-icon-class="`${collapse?'atr-90':''} ${mergeRightIconClass}`" :title-class="mergeTitleClass"
			effect="normal" :main-class="`ptb-40 r-0 ${mergeHeaderClass}`"></t-cell>
		<t-animation ref="animationins">
			<view class="tui-collapse-item-content" :style="collapseItemStyles">
				<slot></slot>
			</view>
		</t-animation>
		<t-line v-if="getPartenBorder" :type="getPartenType" :main-class="`da dlbr.0 ${getPartenBorderClass}`"></t-line>
	</t-view>
</template>

<script setup>
	/**
	 * CollapseItem 折叠面版子组件
	 * @date 2025-05-31 12:02:41
	 * @author TanYuan
	 * @description 折叠面版的子组件
	 * @example /pagesA/layout/collapse/collapse
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-collapse-item.html
	 * @example /pagesA/layout/collapse/collapse
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} value 组件标识 需要唯一 用于控制首次加载是否折叠
	 * @property {String} title 标题
	 * @property {String} titleClass 标题样式
	 * @property {String} label 标签
	 * @property {String} labelClass 标签样式
	 * @property {String} icon 图标
	 * @property {String} iconClass 图标样式
	 * @property {String} contentClass 折叠内容盒子的样式
	 * @property {String} rightIconClass 右侧图标的样式
	 * @property {String} headerBoxClass header盒子样式
	 * @event {Function} click 点击时触发
	 */
	import { sleep, getDomRect } from '../../common/model/util'
	import { TuiAnimation } from '../../common/model/animation'
	import { CommonProps, useTuiThemes, CollapseAttrsType } from '../../common/props/index.uts';
	import { useStyle } from '../../common/model/style.uts';
	const instance = getCurrentInstance()?.proxy!
	interface CollapseItemProps extends CommonProps {
		value : string;
		title : string;
		contentClass : string;
		rightIconClass : string;
		headerBoxClass : string;
		titleClass : string;
		label : string;
		labelClass : string;
		icon : string;
		iconClass : string;
	}
	const props = withDefaults(defineProps<CollapseItemProps>(), {
		value: '',
		title: '',
		contentClass: '',
		rightIconClass: '',
		headerBoxClass: '',
		titleClass: '',
		label: '',
		labelClass: '',
		icon: '',
		iconClass: '',
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
	});

	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['click'])
	const collapseIds = inject<Ref<string[]>>('collapseIds')
	const collapseGroupAttrs = inject<CollapseAttrsType>('collapseGroupAttrs')
	const animationins = ref<TAnimationComponentPublicInstance | null>(null)
	const collapseState = inject<Ref<string>>('collapseState', ref(''))
	const collapse = computed(() : boolean => {
		return collapseIds?.value?.includes(props.value) ?? false
	})
	function updateCollapseState(e : boolean) {
		nextTick(() => {
			getDomRect('.tui-collapse-item-content', instance).then((a : NodeInfo) => {
				let h : number = 0
				if (e) {
					h = a.height!
				}
				const ins = animationins.value!
				const ani : TuiAnimation = ins.createAnimation({ duration: 100 }) as TuiAnimation
				ani.height(h + 'px').step()
				ins.exports()
			})
		})
	}
	onUpdated(() => {
		updateCollapseState(collapse.value)
	})
	watch(collapseState, (e : string) => {
		updateCollapseState(collapse.value)
	}, { immediate: false })
	watch(collapse, (e : boolean) => {
		updateCollapseState(e)
	}, { immediate: true })

	const mergeContentClass = computed(() : string => {
		return `${collapseGroupAttrs?.rowContentClass?.value ?? ''} ${props.contentClass}`
	})
	const collapseItemStyles = computed(() : string => {
		return useStyle(`tdp atp-o atd-300 ${mergeContentClass.value} ${collapse.value ? 'o-1' : 'o-0'}`)
	})

	const mergeRightIconClass = computed(() : string => {
		return `sfwb ${collapseGroupAttrs?.rowRightIconClass?.value ?? ''} ${props.rightIconClass}`
	})
	const mergeTitleClass = computed(() : string => {
		return `sfwb ${collapseGroupAttrs?.rowTitleClass?.value ?? ''} ${props.titleClass}`
	})
	const mergeLabelClass = computed(() : string => {
		return `${collapseGroupAttrs?.rowLabelClass?.value ?? ''} ${props.labelClass}`
	})
	const mergeIconClass = computed(() : string => {
		return `${collapseGroupAttrs?.rowIconClass?.value ?? ''} ${props.iconClass}`
	})
	const mergeHeaderClass = computed(() : string => {
		return `${collapseGroupAttrs?.rowHeaderBoxClass?.value ?? ''} ${props.headerBoxClass}`
	})
	const getPartenAccordion = computed(() : boolean => {
		return collapseGroupAttrs?.accordion?.value ?? false
	})
	const cellMainClass = computed(() : string => {
		return `${collapseGroupAttrs?.rowBoxClass?.value ?? ''} ${props.mainClass}`
	})
	const getPartenEffect = computed(() : string => {
		return collapseGroupAttrs?.effect?.value ?? ''
	})
	const getPartenBorderClass = computed(() : string => {
		return collapseGroupAttrs?.borderClass?.value ?? ''
	})
	const getPartenType = computed(() : string => {
		return collapseGroupAttrs?.type?.value ?? ''
	})
	const getPartenBorder = computed(() : boolean => {
		return collapseGroupAttrs?.border?.value ?? false
	})
	function apse() {
		if (collapseIds != null) {
			if (getPartenAccordion.value) {
				if (collapse.value) {
					collapseIds.value = []
				} else {
					collapseIds.value = [props.value]
				}
			} else {
				let f = collapseIds.value.findIndex((item : string) => item == props.value)
				if (collapse.value) {
					if (f > -1) collapseIds.value.splice(f, 1)
				} else {
					if (f == -1) collapseIds.value.push(props.value)
				}
			}
		}
	}
</script>