<template>
	<t-canvas v-bind="extendsAttrs" :main-class="`twh-400 ${mainClass}`" @initFinished="initFinished"></t-canvas>
</template>

<script setup>
	/**
	 * Sprite 序列帖动画
	 * @date 2025-08-15 13:51:49
	 * @author TanYuan
	 * @description Canvas绘制，支持播放、暂停等控制功能，实现动画交互展示
	 * @example /pagesC/sprite/sprite.uvue
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-sprite.html
	 * @example /pagesC/sprite/sprite.uvue
	 * @property {String} size=[large|medium|small|mini] 组件尺寸 (默认:medium)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型 (默认: "")
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果（点击组件透明度0.7）(默认: false)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {string[]} frames 序列帖数组(默认：[] as string[])
	 * @property {Number} interval 间隔(默认：3000)
	 * @property {Number} speed 播放速度(默认：20)
	 * @property {Boolean} loop 是否循环
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} autoplay 自动播放
	 * @value true 是
	 * @value false 否
	 * @event {Function} play 播放
	 * @event {Function} pause 暂停
	 * @event {Function} resume 继续
	 * @event {Function} stop 停止
	 */
	import { CommonProps, useTuiThemes, } from '../../common/props/index.uts';
	import { sleep } from '../../common/model/util.uts';
	interface SriteProps extends CommonProps {
		frames : string[]
		interval : number
		speed : number
		loop : boolean
		autoplay : boolean
	}
	const props = withDefaults(defineProps<SriteProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		frames: [] as string[],
		interval: 3000,
		speed: 20,
		loop: false,
		autoplay: false
	});
	const { extendsAttrs } = useTuiThemes(props)
	const canvasCtx = ref<CanvasRenderingContext2D | null>(null)
	const canvasContextins = ref<CanvasContext | null>(null)
	let framesImages : Image[] = []
	let timer = 0
	let isPlaying = ref(false)
	let currentFrameIndex = ref(0)
	const emit = defineEmits(['load', 'play', 'stop', 'pause', 'resume'])
	function clearAnimationFrame() {
		if (timer != 0) canvasContextins.value!.cancelAnimationFrame(timer)
	}
	function drawImage(index : number) {
		try {

			const con = canvasContextins.value!
			const ctx = canvasCtx.value!;
			const w = ctx.canvas.offsetWidth
			const h = ctx.canvas.offsetHeight
			const len = framesImages.length
			if (index < len) {
				ctx.clearRect(0, 0, w, h)
				ctx.drawImage(framesImages[index], 0, 0, w, h)
				if (timer != 0) con.cancelAnimationFrame(timer)
				timer = con.requestAnimationFrame((timestamp : number) => {
					sleep(props.speed).then(() => {
						if (isPlaying.value) {
							drawImage(index + 1)
						}
					})
				})
			} else {
				if (props.loop) {
					sleep(props.interval).then(() => {
						if (isPlaying.value) {
							drawImage(0)
						}
					})
				}
			}
		} catch (error) {
			//TODO handle the exception
		}
	}

	function drawInit(e : Image) {
		const ctx = canvasCtx.value!;
		const w = ctx.canvas.offsetWidth
		const h = ctx.canvas.offsetHeight
		ctx.drawImage(e, 0, 0, w, h)
	}

	function getDrawImage(src : string) : Promise<Image> {
		return new Promise((
			resolve : (res : Image) => void,
		) => {
			const con = canvasContextins.value!
			let image = con.createImage();
			// #ifdef WEB
			(image as any).crossOrigin = 'anonymous';
			// #endif
			image.src = src;
			image.onload = () => {
				resolve(image)
			};
		})
	}
	function play() {
		isPlaying.value = true
		emit('play')
		drawImage(0)
	}

	function initFinished(e : CanvasContext) {
		canvasContextins.value = e
		canvasCtx.value = e.getContext('2d')
		const cacheImages : Promise<Image>[] = props.frames.map((src : string) : Promise<Image> => {
			return getDrawImage(src)
		});
		if (props.frames.length > 0) {
			getDrawImage(props.frames[0]).then((e : Image) => {
				drawInit(e)
			})
		}
		Promise.all(cacheImages).then((imgs : Image[]) => {
			framesImages = imgs
			if (props.autoplay) {
				play()
			}
		})
	}


	function pause() {
		isPlaying.value = false
		emit('pause')
	}

	function resume() {
		if (!isPlaying.value) {
			isPlaying.value = true
			emit('resume')
			drawImage(currentFrameIndex.value)
		}
	}

	function stops() {
		clearAnimationFrame()
		isPlaying.value = false
		currentFrameIndex.value = 0
		emit('stop')
		if (framesImages.length > 0) {
			drawInit(framesImages[0])
		}
	}
	onBeforeUnmount(() => {
		clearAnimationFrame()
	})
	defineExpose({
		play,
		pause,
		resume,
		stops
	})
</script>