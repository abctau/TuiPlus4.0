<template>
	<t-view v-bind="extendsAttrs" :main-class="`fl o-0.7 faic ${mainClass}`" @click="mainOnclick">
		<template v-if="status>0">
			<t-line v-if="line" v-bind="extendsAttrs" main-class="mr-10 atsy-0.5" :line-style="lineStyle"
				:hairline="true" length="100"></t-line>
			<t-loading v-bind="extendsAttrs" v-if="status==2" main-class="mr-10" name="spinner"></t-loading>
			<t-text v-bind="extendsAttrs" :text="showText"></t-text>
			<t-line v-if="line" v-bind="extendsAttrs" main-class="ml-10 atsy-0.5" :line-style="lineStyle"
				:hairline="true" length="100"></t-line>
		</template>
	</t-view>
</template>

<script setup>
	/**
	 * Loadmore 加载更多
	 * @date 2025-05-31 12:04:43
	 * @author TanYuan
	 * @description 指示用户可以加载内容的状态，支持多种状态和装饰元素，并可配置尺寸和样式。
	 * @example /pagesA/basics/loadmore/loadmore
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-loadmore.html
	 * @example /pagesA/basics/loadmore/loadmore
	 * @property {String} size=[large|medium|small|mini] 组件尺寸
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Boolean} line undefined
	 * @value true 是
	 * @value false 否
	 * @property {String} lineClass undefined
	 * @property {String} lineStyle=[solid|dashed|dotted'|double] undefined(默认：solid)
	 * @value solid 实心
	 * @value dashed 虚线
	 * @value dotted' 点状线
	 * @value double 双横线
	 * @property {Number} status=[loadmore|loading|nomore] 组件状态(默认：1)
	 * @value loadmore 加载前
	 * @value loading 加载中
	 * @value nomore 没有更多
	 * @property {String} loadingIcon 加载中的图标名称(默认：reload)
	 * @property {String} loadmoreText 加载前的提示文本(默认：上拉加载更多)
	 * @property {String} loadingText 加载中的提示文本(默认：加载中)
	 * @property {String} nomoreText 没有更多的显示文本(默认：页面有限，服务不止)
	 * @event {Function} click 点击时触发
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface LoadmoreProps extends CommonProps {
		line : boolean;
		lineClass : string;
		lineStyle : string;
		status : number;
		loadingIcon : string;
		loadmoreText : string;
		loadingText : string;
		nomoreText : string;
	}
	const props = withDefaults(defineProps<LoadmoreProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		line: false,
		lineClass: '',
		lineStyle: 'solid',
		status: 1,
		loadingIcon: 'reload',
		loadmoreText: '上拉加载更多',
		loadingText: '加载中',
		nomoreText: '页面有限，服务不止'
	});

	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['click'])

	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (props.path != '') {
			uni.navigateTo({
				url: props.path,
				fail: (_) => {
					uni.switchTab({
						url: props.path
					})
				}
			})
		} else {
			emit('click', e)
		}
	}
	const showText = computed(() => {
		const statetext : string[] = ['', props.loadmoreText, props.loadingText, props.nomoreText]
		return statetext[props.status]
	})
</script>