<template>
	<scroll-view :style="stepmainStyles" :direction="direction" :show-scrollbar="false">
		<t-view
			:main-class="`${direction=='horizontal'?'fl':'fv'} ${isEvenlyDistributed? direction=='horizontal'?'w-100%':'h-100%':''}`">
			<slot></slot>
		</t-view>
	</scroll-view>
</template>
<script setup>
	/**
	 * Steps 步骤条
	 * @date 2025-05-31 12:07:12
	 * @author TanYuan
	 * @description 展示操作流程的步骤进度，引导用户按步骤完成任务,3.0支持内容组件滚动,内容自适度,子组件样式主题覆盖父组件样式主题
	 * @example /pagesA/layout/steps/steps
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-steps.html
	 * @example /pagesA/layout/steps/steps
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} direction=[horizontal|vertical] 布局方向(默认：horizontal)
	 * @value horizontal 横向
	 * @value vertical 纵向滚动
	 * @property {Number} current 当前步骤(默认：2)
	 * @property {String} activeColor 激活状态文字颜色
	 * @property {String} activeIcon 激活图标名称(默认：checkbox-mark)
	 * @property {String} activeIconClass 	激活图标的类名
	 * @property {String} barClass 步骤条的类名
	 * @property {String} indexClass 步骤索引的类名
	 * @property {String} inactiveColor 未激活状态文字颜色(默认：#dedede)
	 * @property {Boolean} showIndex 是否显示序号(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} isEvenlyDistributed 是否每项一部分布局
	 * @value true 是
	 * @value false 否
	 */
	import { useStyle } from '../../common/model/style'
	import { StepsProps, useTuiThemes, StepsGroupAttrsType } from '../../common/props/index.uts';
	const props = withDefaults(defineProps<StepsProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		direction: 'horizontal',
		current: 2,
		activeColor: '',
		activeIcon: 'checkbox-mark',
		activeIconClass: '',
		barClass: '',
		indexClass: '',
		inactiveColor: '#dedede',
		showIndex: true,
		isEvenlyDistributed: false,
	});
	const cur = ref<number>(props.current)
	const total = ref<number>(0)
	const stepmainStyles = computed(() : string => {
		let sty : string = ''
		if (props.direction == 'horizontal') {
			sty += `fl`
		} else {
			sty += `fv p-20 h-500 `
		}
		return useStyle(`${sty} ${props.mainClass}`)
	})
	provide('stepsGroupAttrs', {
		path: toRef<string>(() : string => props.path),
		hover: toRef<boolean>(() : boolean => props.hover),
		type: toRef<string>(() : string => props.type),
		disabled: toRef<boolean>(() : boolean => props.disabled),
		stop: toRef<boolean>(() : boolean => props.stop),
		effect: toRef<string>(() : string => props.effect),
		size: toRef<string>(() : string => props.size),
		mainClass: toRef<string>(() : string => props.mainClass),
		nativeClass: toRef<string>(() : string => props.nativeClass),
		direction: toRef<string>(() : string => props.direction),
		current: toRef<number>(() : number => props.current),
		activeColor: toRef<string>(() : string => props.activeColor),
		activeIcon: toRef<string>(() : string => props.activeIcon),
		activeIconClass: toRef<string>(() : string => props.activeIconClass),
		barClass: toRef<string>(() : string => props.barClass),
		indexClass: toRef<string>(() : string => props.indexClass),
		inactiveColor: toRef<string>(() : string => props.inactiveColor),
		showIndex: toRef<boolean>(() : boolean => props.showIndex),
		isEvenlyDistributed: toRef<boolean>(() : boolean => props.isEvenlyDistributed)
	} as StepsGroupAttrsType)
	provide('total', total)
</script>