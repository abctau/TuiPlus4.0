<template>
	<!-- #ifdef APP -->
	<t-view v-bind="extendsAttrs" ref="tuidrrawable" :main-class="`dr h-500 ${mainClass}`">
		<image class="drawable-image" v-for="(item,index) in drawImageList" :key="index" mode="scaleToFill"
			:src="item.url" :style="{
			width:`${item.dWidth}px`,
			height:`${item.dHeight}px`,
			top:`${item.dy}px`,
			left:`${item.dx}px`,
		}"></image>
	</t-view>
	<!-- #endif -->
	<!-- #ifndef APP -->
	<t-canvas v-bind="extendsAttrs" :main-class="`h-500 ${mainClass}`" @initFinished="onInitFinished"></t-canvas>
	<!-- #endif -->
</template>

<script setup>
	/**
	 * Drawable 原生绘制
	 * @date 2025-05-31 12:03:03
	 * @author TanYuan
	 * @description 虽然有功能强大的Canvas组件,但是在长列表绘制场景,原生draw仍然有一定的优势,drawable组件返回TuiDrawableContext对象统一H5和APP端的写法,并对Draw功能增强/后续继续增强它的绘制能力
	 * @example /pagesA/basics/drawable/drawable
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-drawable.html
	 * @example /pagesA/basics/drawable/drawable
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @event {Function} initFinished 组件初始化完成，返回绘制对象
	 */

	import { TuiGuid } from '../../common/model/util.uts'
	import { TuiDrawableContext } from '../../common/model/drawable'
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	const instance = getCurrentInstance()?.proxy!
	const tuidrrawable = ref<ComponentPublicInstance | null>(null)
	const drawid = ref<string>(`drawable${TuiGuid(20)}`)
	// #ifdef APP
	const ctx = ref<DrawableContext | null>(null)
	// #endif
	// #ifndef APP
	const ctx = ref<CanvasRenderingContext2D | null>(null)
	// #endif
	// #ifndef APP
	const canvasEl = ref<CanvasContext | null>(null)
	// #endif
	// #ifdef APP
	const drawImageList = ref<TypeDrawImage[]>([])
	// #endif
	type TypeDrawImage = {
		url : string
		dx : number
		dy : number
		dWidth : number
		dHeight : number
	}
	const props = withDefaults(defineProps<CommonProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: ''
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['initFinished'])
	function onInitFinished(e : CanvasContext) {
		// #ifndef APP
		ctx.value = e.getContext('2d')
		canvasEl.value = e
		emit('initFinished', new TuiDrawableContext(instance, ctx.value, e))
		// #endif
	}
	function drawImage(url : string, dx : number, dy : number, dWidth : number, dHeight : number) {
		// #ifdef APP
		drawImageList.value.push({
			url, dx, dy, dWidth, dHeight
		} as TypeDrawImage)
		// #endif
	}
	function reset() {
		// #ifdef APP
		if (drawImageList.value.length > 0) drawImageList.value = []
		// #endif
	}
	onMounted(() => {
		// #ifdef APP
		nextTick(() => {
			try {
				ctx.value = tuidrrawable.value?.$el?.getDrawableContext()
				emit('initFinished', new TuiDrawableContext(instance, ctx.value!))
			} catch (error) { }
		})
		// #endif
	})
	defineExpose({
		reset,
		drawImage
	})
</script>
<style>
	.drawable-image {
		position: absolute;
		z-index: 999;
	}
</style>