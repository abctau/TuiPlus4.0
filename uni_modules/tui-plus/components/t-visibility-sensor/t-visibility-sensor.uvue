<template>
	<view class="main-visibilility-sensor">
		<slot></slot>
	</view>
</template>

<script setup>
	/**
	 * VisibilitySensor 元素监听
	 * @date 2025-05-31 12:08:34
	 * @author TanYuan
	 * @description 监听元素是否在可视区
	 * @example /pagesA/layout/visibility-sensor/visibility-sensor
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-visibility-sensor.html
	 * @example /pagesA/layout/visibility-sensor/visibility-sensor
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：large)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认：plain)
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Number} scrollTop 滚动组件的scrollTop值
	 * @property {String} mark 组件标记
	 * @event {Function} change 元素状态发生变化时触发
	 */

	import { TuiVisibilitySensorChange } from '@/uni_modules/tui-plus';
	import { getDomRect } from '../../common/model/util';
	import { CommonProps } from '../../common/props/index.uts';
	interface VisibilitySensorProps extends CommonProps {
		scrollTop : number
		mark : string
	}
	const instance = getCurrentInstance()?.proxy!
	let vis : boolean = false
	const props = withDefaults(defineProps<VisibilitySensorProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		scrollTop: 0,
		mark: ''
	});
	const emit = defineEmits(['visible', 'change', 'transitionend'])
	function transitionend(e : UniEvent) {
		emit('transitionend', e)
	}
	function checkVisibility() {
		getDomRect('.main-visibilility-sensor', instance).then((rect : NodeInfo) => {
			const top = rect.top!
			const bottom = rect.bottom!
			const wh = uni.getSystemInfoSync().windowHeight
			const isVisible = top < wh && bottom > 0;
			if (isVisible) {
				emit('visible', true);
			} else {
				emit('visible', false);
			}
			if (vis != isVisible) {
				emit('change', {
					ins: instance,
					state: isVisible,
					mark: props.mark
				} as TuiVisibilitySensorChange)
				vis = isVisible
			}
		})
	}
	watch(
		() : number => props.scrollTop,
		(_ : number) => {
			checkVisibility()
		}
	);
	onMounted(() => {
		checkVisibility()
	})
</script>