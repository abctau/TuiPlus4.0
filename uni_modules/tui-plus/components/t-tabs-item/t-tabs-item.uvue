<template>
	<t-view ref="tabsitemins" :main-class="tabsItemStyles" @click="mainOnclick">
		<slot>
			<t-view main-class="dr ov">
				<t-text :effect="tabsEffect" :type="typeState" :size="tabsSize" :main-class="titleClass"
					:text="title"></t-text>
				<t-badge v-if="badge" :type='tabsType' :size="tabsSize" main-class="ml-10 da dtr-n50%"
					v-bind="badgeAttrs"></t-badge>
			</t-view>
		</slot>
	</t-view>
</template>

<script setup>
	/**
	 * TabsItem 标签导航
	 * @date 2025-05-31 12:07:59
	 * @author TanYuan
	 * @description 标签导航子组件
	 * @example /pagesA/layout/tabs/tabs
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-tabs-item.html
	 * @example /pagesA/layout/tabs/tabs
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} title 标题文本
	 * @property {String} titleClass 文本样式
	 * @property {Number} value 标签对应的值，一般后端需要(默认：1)
	 * @property {Boolean} badge 是否显示徽标(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {UTSJSONObject} badgeAttrs 徽标组件的属性配置，支持t-badge组件的所有属性(默认：{})
	 * @event {Function} click 点击时触发
	 */

	import { CommonProps, TabsGroupAttrsType, useTuiThemes } from '../../common/props/index.uts';
	interface TabsItemProps extends CommonProps {
		title : string
		titleClass : string
		value : number
		badge : boolean
		badgeAttrs : UTSJSONObject
	}
	const props = withDefaults(defineProps<TabsItemProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		title: '',
		titleClass: '',
		value: 0,
		badge: true,
		badgeAttrs: {} as UTSJSONObject
	});
	const emit = defineEmits(['click'])
	const tabsitemins = ref<ComponentPublicInstance | null>(null)
	const childChange = inject<(value : number) => void>('childChange')
	const tabsGroupAttrs = inject<TabsGroupAttrsType>('tabsGroupAttrs')
	const partenCurrent = inject<Ref<number>>('partenCurrent')
	const initNodesInfo = inject<(key : number, nodeinfo : NodeInfo) => void>('initNodesInfo')
	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation();
		if (childChange != null) childChange(props.value)
		emit('click', e)
	}
	const typeState = computed(() : string => {
		return (partenCurrent?.value ?? 0) == props.value ? tabsGroupAttrs?.type?.value ?? '' : ''
	})
	const tabsEffect = computed(() : string => {
		return tabsGroupAttrs?.effect?.value ?? ''
	})
	const tabsSize = computed(() : string => {
		return tabsGroupAttrs?.size?.value ?? ''
	})
	const tabsType = computed(() : string => {
		return tabsGroupAttrs?.type?.value ?? ''
	})
	const tabsItemStyles = computed(() : string => {
		let size = tabsGroupAttrs?.size?.value ?? ''
		const scrollable : boolean = (tabsGroupAttrs?.scrollable?.value == null) ? false : tabsGroupAttrs?.scrollable?.value ?? false
		return `ov fl fc h-100% tdp-${size},,lr ${props.mainClass} ${scrollable ? 'f' : ''}`
	})
	onMounted(() => {
		nextTick(() => {
			tabsitemins.value?.$callMethod('getInfo', (rect : NodeInfo) => {
				if (initNodesInfo != null) initNodesInfo(props.value, rect)
			})
		})
	})
</script>