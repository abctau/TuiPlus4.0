<template>
	<t-button v-bind="extendsAttrs" :border="border" @click="setTimer">{{showText}}</t-button>
</template>
<script setup>
	/**
	 * Code 验证码
	 * @date 2025-05-31 12:02:28
	 * @author TanYuan
	 * @description 获取验证码组件用于在表单中提供一种倒计时功能，通常用于发送短信验证码的场景。它的功能亮点包括：开始倒计时后显示剩余时间，倒计时结束后允许重新获取验证码。使用场景包括：注册、登录、找回密码等需要验证用户手机号的场合。组件还提供了自定义边框、大小和提示文本的选项。
	 * @example /pagesA/basics/code/code
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-code.html
	 * @example /pagesA/basics/code/code
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} border 是否显示边框
	 * @value true 是
	 * @value false 否
	 * @property {Number} seconds 倒计时的秒数(默认：60)
	 * @property {String} startText 尚未开始时倒计时的提示文本(默认：获取验证码)
	 * @property {String} changeText 正在倒计时中的提示文本(默认：S后重新获取)
	 * @property {String} endText 倒计时结束时的提示文本	(默认：重新获取)
	 * @event {Function} start 倒计时开始时触发
	 * @event {Function} change 倒计时进行中触发
	 * @event {Function} end 倒计时结束时触发
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface CodeProps extends CommonProps {
		hover : boolean
		size : string
		border : boolean
		seconds : number
		startText : string
		changeText : string
		endText : string
	}

	const props = withDefaults(defineProps<CodeProps>(), {
		path: '',
		hover: true,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: 'mini',
		mainClass: '',
		nativeClass: '',
		border: false,
		seconds: 60,
		startText: '获取验证码',
		changeText: '后重新获取',
		endText: '重新获取'
	});

	const showText = ref<string>(props.startText)
	const timerNum = ref<number>(0)
	let timer = 0

	const formatText = computed(() : string => {
		let time : string = timerNum.value == 0 ? '' : timerNum.value.toString()
		return time + showText.value
	})

	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['start', 'change', 'end'])
	function setTimer() {
		try {
			emit('start')
			timerNum.value = props.seconds
			clearInterval(timer)
			timer = setInterval(() => {
				if (timerNum.value > 0) timerNum.value--
				emit('change', timerNum.value)
				if (timerNum.value == 0) {
					emit('end', timerNum.value)
					showText.value = props.endText
					clearInterval(timer)
				} else {
					showText.value = timerNum.value + props.changeText
				}
			}, 1000)
		} catch (e) {
			console.log(e)
		}
	}
	function start() {
		setTimer()
	}
	function stops() {
		showText.value = props.endText
		clearInterval(timer)
	}
	onUnmounted(() => {
		clearInterval(timer)
	})
	defineExpose({
		start,
		stops
	})
</script>