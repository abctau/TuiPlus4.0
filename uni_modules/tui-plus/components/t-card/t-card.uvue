<template>
	<t-view v-bind="extendsAttrs" :main-class="`dr fv ${extendsPrb} ${mainClass}`">
		<t-row v-if="icon != '' || title != '' || subTitle != '' || tag != ''" :main-class="`faic ${headerClass}`">
			<t-icon v-if="icon != ''" :name="icon"
				:main-class="`${extendsRadius} ${extendsSfc} mr-20 s-${getFontSizeToValue*2.5}px ${iconClass}`"></t-icon>
			<t-col main-class='f-1' v-if="title != '' || subTitle != ''">
				<t-text v-if="title != ''" size="large"
					:main-class="`slhm-1.7 ${extendsForegroundColor} sfwb ${titleClass}`" :text="title"></t-text>
				<t-text v-if="subTitle != ''" :main-class="`${extendsSfc} mt-10 o-0.8 slhm-1.7 ${subTitleClass}`"
					:text="subTitle"></t-text>
			</t-col>
			<t-text v-if="tag != ''" :main-class="`${extendsSfc} mr-10 o-0.5  ${tagClass}`" :text="tag"></t-text>
		</t-row>
		<slot></slot>
	</t-view>
</template>

<script setup>
	/**
	 * Card 卡片
	 * @date 2025-05-31 12:02:07
	 * @author TanYuan
	 * @description 用于展示标题、副标题、标签和图片的卡片组件，支持自定义类名以增强样式控制。
	 * @example /pagesA/layout/card/card
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-card.html
	 * @example /pagesA/layout/card/card
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} icon 卡片图标，支持图片地址和字体图标
	 * @property {String} iconClass 图标样式
	 * @property {String} title 标题
	 * @property {String} titleClass 标题样式
	 * @property {String} subTitle 副标题
	 * @property {String} subTitleClass 副标题样式
	 * @property {String} tag 描述
	 * @property {String} tagClass 描述样式
	 * @property {String} headerClass header盒子的样式
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';

	interface CardProps extends CommonProps {
		icon : string
		iconClass : string
		title : string
		titleClass : string
		subTitle : string
		subTitleClass : string
		tag : string
		tagClass : string
		headerClass : string
	}
	const props = withDefaults(defineProps<CardProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		icon: '',
		iconClass: '',
		title: '',
		titleClass: '',
		subTitle: '',
		subTitleClass: '',
		tag: '',
		tagClass: '',
		headerClass: ''
	})
	const { extendsAttrs, extendsPrb, extendsRadius, extendsSfc, getFontSizeToValue, extendsForegroundColor } = useTuiThemes(props)
</script>