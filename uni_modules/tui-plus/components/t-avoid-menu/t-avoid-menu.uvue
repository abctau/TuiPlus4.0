<template>
	<t-view v-bind="extendsAttrs" :main-class="menuHeader" @initFinished="initFinished">
		<!-- #ifndef MP -->
		<t-status-bar></t-status-bar>
		<!-- #endif -->
		<t-view :main-class="menuHeaderContent">
			<slot></slot>
		</t-view>
	</t-view>
</template>

<script setup>
	/**
	 * Search 胶囊区域安全区
	 * @date 2025-05-31 12:06:38
	 * @author TanYuan
	 * @description 小程序避开顶部的胶囊域组件
	 * @example /pagesA/form/search/search
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-search.html
	 * @example /pagesA/form/search/search
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	const menu_left = ref(0)
	const menu_bottom = ref(0)
	const sysW = ref(0)
	const box_left = ref(0)

	// #ifdef MP
	menu_left.value = wx.getMenuButtonBoundingClientRect().left
	menu_bottom.value = wx.getMenuButtonBoundingClientRect().bottom
	sysW.value = uni.getWindowInfo().screenWidth
	// #endif

	const props = withDefaults(defineProps<CommonProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['search'])

	const menuContentWidth = computed(() : number => {
		return menu_left.value - box_left.value
	})
	const menuHeader = computed(() : string => {
		let sty = ''
		// #ifdef MP
		sty = `w-${menuContentWidth.value}px ${props.mainClass}`
		// #endif
		return sty
	})
	const menuHeaderContent = computed(() : string => {
		let sty = ''
		// #ifdef MP
		sty += `h-${menu_bottom.value}px fjce `
		// #endif
		return sty
	})

	function initFinished(e : NodeInfo) {
		box_left.value = e.left!
	}
</script>