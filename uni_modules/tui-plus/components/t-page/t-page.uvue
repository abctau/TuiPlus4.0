<template>
	<template v-if="scrollDisabled">
		<view :style="['height:100%;',extendsPageColor,extendsViewStyle]">
			<slot v-if="showLoading"></slot>
			<t-loading-page v-if="showMask"></t-loading-page>
		</view>
	</template>
	<template v-else>
		<!-- #ifdef APP -->
		<scroll-view :style="['flex:1;',extendsPageColor,extendsViewStyle]" :show-scrollbar="false">
		<!-- #endif -->
			<view :style="contentStyle">
				<slot v-if="showLoading"></slot>
				<t-loading-page v-if="showMask"></t-loading-page>
			</view>
		<!-- #ifdef APP -->
		</scroll-view>
		<!-- #endif -->
	</template>
</template>

<script setup>
	/**
	 * Page 页面
	 * @date 2025-05-31 12:05:09
	 * @author TanYuan
	 * @description 页面组件，用于定义页面的布局和结构，支持配置导航栏、标签栏、加载状态、加载时间、页面模式等。
	 * @example /pages/index/index
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-page.html
	 * @example /pages/index/index
	 * @property {String} size=[large|medium|small|mini] 组件尺寸
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：info)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @property {Boolean} loading 是否显示loading
	 * @property {Number} waiting 等待时间
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @event {Function} initFinished 组件初始化完成时触发 
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface PageProps extends CommonProps {
		scrollDisabled : boolean
		loading : boolean
		waiting : number
	}
	const props = withDefaults(defineProps<PageProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		scrollDisabled: false,
		loading: false,
		waiting: 500
	});
	const { extendsPageColor, extendsViewStyle } = useTuiThemes(props)
	const emit = defineEmits(['initFinished'])
	const showMask = ref<boolean>(props.loading)
	const showLoading = ref<boolean>(!props.loading)
	let timer : number = 0
	const contentStyle = computed(() : string[] => {
		// #ifdef APP
		return [] as string[]
		// #endif
		// #ifndef APP
		return [extendsPageColor.value, extendsViewStyle.value]
		// #endif
	})
	onMounted(() => {
		nextTick(() => {
			showLoading.value = true
			emit('initFinished')
			if (showMask.value) {
				timer = setTimeout(() => {
					showMask.value = false
				}, props.waiting)
			}
		})
	})
	onUnmounted(() => {
		clearTimeout(timer)
	})
</script>