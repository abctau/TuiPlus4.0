<template>
	<t-view v-bind="extendsAttrs" :main-class="thStyles" @initFinished="initFinished">
		<slot></slot>
	</t-view>
</template>

<script setup>	/**
	 * MarkedTh MarkedTable子组件
	 * @date 2025-08-14 19:28:20
	 * @author TanYuan
	 * @description MarkedTable子组件
	 * @example /pagesA/layout/marked-table/marked-table.uvue
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-marked-th.html
	 * @example /pagesA/layout/marked-table/marked-table.uvue
	 * @property {String} size=[large|medium|small|mini] 组件尺寸 (默认:medium)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型 (默认: "")
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果（点击组件透明度0.7）(默认: false)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} align 对齐方式(默认：left)
	 * @property {String} width 列宽
	 */
	
	import { NodesToken, TableCell } from '../../common/marked/index.uts'
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface MarkdownTableThProps extends CommonProps {
		align : string;
		width : string;
	}
	const props = withDefaults(defineProps<MarkdownTableThProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		align: 'left',
		width: '',
	});
	const { extendsAttrs } = useTuiThemes(props)
	const columnWidths = inject<UTSJSONObject>('columnWidths', {} as UTSJSONObject)
	const colunmTotal = inject<Ref<number>>('colunmTotal', ref<number>(0))
	const childThProps = inject<UTSJSONObject>('childThProps', {} as UTSJSONObject)
	const border = inject<Ref<boolean>>('border', ref<boolean>(false))
	const sortIndex = ref<number>(0)
	const alignmentBoxStyles = computed(() : string => {
		const align : string = props.align
		let sty = `fl faic`
		if (align == 'left') sty += ` fjcs`
		if (align == 'center') sty += ` fjcc`
		if (align == 'right') sty += ` fjce`
		return sty
	})
	const thStyles = computed(() : string => {
		let sty : string = `${props.width == '' ? 'f' : 'w-' + props.width} ${alignmentBoxStyles.value}`
		sty += ` tdp`
		if (border.value && sortIndex.value < colunmTotal.value - 1) {
			sty += ' br-1px,s,#e2e2e3'
		}
		return sty
	})
	function initFinished(rect : NodeInfo) {
		const col : number = colunmTotal.value
		columnWidths.set(col.toString(), rect.width!)
		sortIndex.value = col
		childThProps.set(col.toString(), {
			align: toRef<string>(() : string => props.align)
		})
		colunmTotal.value++
	}
</script>