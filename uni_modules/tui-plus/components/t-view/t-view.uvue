<template>
	<view class='tui-visible' @click="mainOnclick" @transitionend="transitionend" :hover-stop-propagation="true"
		:hover-stay-time="0" :hover-start-time="0" :hover-class="hover?'tui-hove-class':''"
		:style="[extendsViewStyle,themeDisabled]" @touchmove="touchmove">
		<!-- #ifdef MP -->
		<view v-if="stop && touchStop" @touchmove.stop="touchmove" @click.stop="mainOnclick"
			:style="['width: 100%;height: 100%;',extendsViewFilterPmStyle]">
			<slot></slot>
		</view>
		<view v-else-if="stop" @click.stop="mainOnclick"
			:style="['width: 100%;height: 100%;',extendsViewFilterPmStyle]">
			<slot></slot>
		</view>
		<view v-else-if="touchStop" @touchmove.stop="touchmove"
			:style="['width: 100%;height: 100%;',extendsViewFilterPmStyle]">
			<slot></slot>
		</view>
		<slot v-else></slot>
		<!-- #endif -->
		<!-- #ifndef MP -->
		<slot></slot>
		<!-- #endif -->
	</view>
</template>

<script setup>
	/**
	 * View 视图
	 * @date 2025-05-31 12:08:28
	 * @author TanYuan
	 * @description 
	 * @example 
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-view.html
	 * @example 
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：large)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认：plain)
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Boolean} touchStop 是否阻止手势事件冒泡
	 * @value true 是
	 * @value false 否
	 * @event {Function} click 点击时触发
	 * @event {Function} transitionend 动画结束时触发
	 * @event {Function} initFinished 组件初始化完成触发 返回组件的节点信息
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	import { getDomRect } from '../../common/model/util.uts';
	const instance = getCurrentInstance()?.proxy!
	interface ViewProps extends CommonProps {
		touchStop : boolean
	}
	const props = withDefaults(defineProps<ViewProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		touchStop: false
	});
	const { extendsViewStyle, themeDisabled, extendsViewFilterPmStyle } = useTuiThemes(props)
	const emit = defineEmits(['click', 'transitionend', 'initFinished'])
	function transitionend(e : UniEvent) {
		emit('transitionend', e)
	}
	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (props.path != '') {
			uni.navigateTo({
				url: props.path,
				fail: (_) => {
					uni.switchTab({
						url: props.path
					})
				}
			})
		} else {
			emit('click', e)
		}
	}
	function touchmove(e : UniTouchEvent) {
		// #ifndef APP-ANDROID
		if (props.touchStop) e.preventDefault()
		// #endif
	}
	function getInfo(callback : (e : NodeInfo) => void) {
		getDomRect('.tui-visible', instance).then((rect : NodeInfo) => {
			callback(rect)
		})
	}

	onMounted(() => {
		nextTick(() => {
			getInfo((rect : NodeInfo) => {
				emit('initFinished', rect)
			})
		})
	})
	defineExpose({
		getInfo
	})
</script>
<style lang="scss">
	.tui-hove-class {
		opacity: 0.8 !important;
	}
</style>