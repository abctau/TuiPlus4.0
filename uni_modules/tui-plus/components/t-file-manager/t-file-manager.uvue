<template>
	<t-view v-bind="extendsAttrs" :main-class="`fv ${mainClass}`">
		<t-view main-class="" @click="chooseFile">
			<slot name="menu">
				<t-button v-bind="extendsAttrs" main-class="">文件选择</t-button>
			</slot>
		</t-view>
		<slot :files="fileList">
			<t-row v-for="(item,index) in fileList" :key="index"
				:main-class="`faic tdb ${extendsPadding} ${index!=fileList.length-1?'bb-1px,s,#f5f5f5':''}`"
				:hover="true">
				<t-text v-bind="extendsAttrs" type="info" :overflow="true" main-class="f mtb-5"
					:text="item.name"></t-text>
				<t-icon type="e" v-bind="extendsAttrs" main-class="ml-30 ats-1.2" name="close-circle-line" :hover="true"
					@click="removefile(index)"></t-icon>
			</t-row>
		</slot>
	</t-view>
</template>

<script setup>
	/**
	 * FileManager 文件选择
	 * @date 2025-05-31 12:03:22
	 * @author TanYuan
	 * @description 文件管理选择上传组件是一款用于便捷上传、管理和分享文件支持返回文件md5,用于服务端判断重复上传,上传逻辑需要自己实现
	 * @example /pagesA/form/file-manager/file-manager
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-file-manager.html
	 * @example /pagesA/form/file-manager/file-manager
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false)
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Number} count 最大选择数量(默认：9)
	 * @property {UTSJSONObject[]} modelValue 选择的文件列表(默认：[])
	 * @property {String} fileType=[all|image|video|audio] 选择文件的类型,可选(默认：all)
	 * @value all 默认值，选择本地文件，包含图片和视频
	 * @value image 选择图片文件
	 * @value video 选择视频文件
	 * @value audio 选择音频文件
	 * @property {string[]} sizeType=[original |compressed] original 原图，compressed 压缩图，默认二者都有, App平台不支持(默认：[])
	 * @value original  原图
	 * @value compressed 压缩图
	 * @property {any} sourceType undefined
	 * @event {Function} change 选择文件列表发生变化时触发
	 */
	import { getTuiUploadFileOptions } from '../../common/model/upload'
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	const instance = getCurrentInstance()?.proxy!
	interface FileManagerProps extends CommonProps {
		path : string;
		hover : boolean;
		type : string;
		disabled : boolean;
		stop : boolean;
		effect : string;
		size : string;
		mainClass : string;
		nativeClass : string;
		count : number;
		modelValue : UTSJSONObject[];
		extension : string[];
		fileType : string;
		sizeType : string[];
		sourceType : string[];
	}

	const props = withDefaults(defineProps<FileManagerProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		count: 9,
		modelValue: [] as UTSJSONObject[],
		extension: [] as string[],
		fileType: 'all',
		sizeType: ['original', 'compressed'] as string[],
		sourceType: ['album', 'camera'] as string[]
	});

	const { extendsAttrs, extendsPadding } = useTuiThemes(props)
	const emit = defineEmits(["update:modelValue", "change"])
	const fileList = ref<UTSJSONObject[]>([])
	const itemValidate = inject<() => void>('itemValidate', () => { })
	defineSlots<{
		default(props : { files : UTSJSONObject[] }) : any
	}>()
	watch(() : UTSJSONObject[] => props.modelValue, (val : UTSJSONObject[]) => {
		fileList.value = val.slice()
	}, { immediate: true })

	function removefile(e : number) {
		fileList.value.splice(e, 1)
		emit('update:modelValue', fileList.value)
		emit('change', fileList.value)
		nextTick(() => {
			itemValidate()
		})
	}
	function chooseFile() {
		let dc = props.count - fileList.value.length
		if (props.count <= 0) dc = 9
		uni.chooseFile({
			type: props.fileType,
			count: dc,
			sizeType: props.sizeType,
			sourceType: props.sourceType,
			success: (res) => {
				getTuiUploadFileOptions(res).then((rst : UTSJSONObject[]) => {
					if (props.count > 0) {
						const arr = rst.slice(0, dc)
						fileList.value.push(...arr)
					} else {
						fileList.value.push(...rst)
					}
					emit('update:modelValue', fileList.value)
					emit('change', fileList.value)
					nextTick(() => {
						itemValidate()
					})
				})
			}
		})
	}
</script>