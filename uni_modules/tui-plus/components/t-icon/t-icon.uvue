<template>
	<t-view v-bind="extendsAttrs" :main-class="`ov ${mainClass}`" @transitionend="transitionend" @click="mainOnclick">
		<image v-if="isImages" :src="name" :style="[extendsFontSizeToSize]"></image>
		<text class="tui-visible" :style="[{ 'font-family': familyName },themeColor,themeFontSize,extendsTextStyle]"
			v-else>{{ IconName }}</text>
	</t-view>
</template>

<script setup>
	/**
	 * Icon 图标
	 * @date 2025-05-31 12:04:00
	 * @author TanYuan
	 * @description 200余款内置图标，支持字体编辑工具添加删除定义自己喜欢的图标,支持图片-
	 * @example /pagesA/basics/icon/icon
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-icon.html
	 * @example /pagesA/basics/icon/icon
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} name 图标的名称
	 * @event {Function} click 点击时触发
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts'
	import { IconFontList } from '../../common/config/icons'
	const IconName = ref<string>("\ue797")
	interface IconProps extends CommonProps {
		name : string;
	}
	const props = withDefaults(defineProps<IconProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		name: ''
	});
	const { extendsAttrs, getFontSizeToValue, extendsFontSizeToSize, themeColor, themeFontSize, extendsTextStyle } = useTuiThemes(props)
	const emit = defineEmits(['click', 'transitionend'])
	const isImages = computed(() : boolean => props.name.includes('/'))
	const familyName = computed(() : string => {
		let nm : string = ''
		for (let key in IconFontList) {
			const option : UTSJSONObject = IconFontList.getJSON(key) ?? {}
			const name : string | null = option.getString(props.name)
			if (name != null) {
				nm = key
				IconName.value = name
				break;
			}
		}
		return nm
	})
	function transitionend(e : UniEvent) {
		emit('transitionend', e)
	}
	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (props.path != '') {
			uni.navigateTo({
				url: props.path,
				fail: (_) => {
					uni.switchTab({
						url: props.path
					})
				}
			})
		} else {
			emit('click', e)
		}
	}
</script>
<style lang="scss">
	@font-face {
		font-family: "iconfont";
		src: url('../../static/font/iconfont.ttf');
	}

	.tui-visible {
		overflow: visible;
	}
</style>