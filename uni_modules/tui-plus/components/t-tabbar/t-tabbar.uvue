<template>
	<t-view v-bind="extendsAttrs" :main-class="`fv ptb-10 fjcb ${mainClass}`">
		<view style="overflow: visible;">
			<slot :current="cur" :type="type"></slot>
		</view>
	</t-view>
</template>

<script setup>
	/**
	 * Tabbar 底部导航
	 * @date 2025-05-31 12:07:44
	 * @author TanYuan
	 * @description 页面切换底部菜单
	 * @example /pagesA/layout/tabbar/tabbar
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-tabbar.html
	 * @example /pagesA/layout/tabbar/tabbar
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Number} current 当前页索引(默认：1)
	 * @event {Function} change undefined
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface TabbarProps extends CommonProps {
		current : number
	}
	const props = withDefaults(defineProps<TabbarProps>(), {
		path: '',
		hover: false,
		type: 'p',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		current: 0
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['change'])
	const cur = ref<number>(props.current)
	const childIns = ref<ComponentPublicInstance[]>([])
	let sortindex = 0
	watch(cur, (e : number) => {
		emit('change', e)
	}, { immediate: true })
	provide('updateCur', (e : number) => {
		cur.value = e
	})
	provide('getSortIndex', (e : Ref<number>) => {
		e.value = sortindex
		sortindex++
	})
</script>