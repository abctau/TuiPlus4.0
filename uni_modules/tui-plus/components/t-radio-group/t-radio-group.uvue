<template>
	<t-view v-bind="extendsAttrs" @click="mainOnclick">
		<slot></slot>
	</t-view>
</template>
<script setup>
	/**
	 * RadioGroup  多选框组
	 * @date 2025-05-31 12:06:03
	 * @author TanYuan
	 * @description 支持布局方向（横向或纵向）。不同的显示模式(radio、button、cell)丰富主题配置，
	 * @example /pagesA/form/radio-group/radio-group
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-radio-group.html
	 * @example /pagesA/form/radio-group/radio-group
	 * @property {String} size=[large|medium|small|mini] 组件尺寸
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} childClass 统一设置子元素样式
	 * @property {Boolean} transition 是否支持动画
	 * @value true 是
	 * @value false 否
	 * @property {Number} duration 动画时间(默认：200)
	 * @property {String} labelClass 显示文本样式
	 * @property {String} icon 图标(默认：check-fill)
	 * @property {String} iconBoxClass 图标容器样式
	 * @property {String} activeClass 选中时的组件的样式
	 * @property {String} inactiveClass 未选中时的组件的样式
	 * @property {String} iconClass 图标样式
	 * @property {String} activeIconClass 选中时图标的样式
	 * @property {String} inactiveIconClass 未选中时图标的样式
	 * @property {String} activeLabelClass 选中时文本的样式
	 * @property {String} inactiveLabelClass 未选中时文本的样式
	 * @property {String} mode=[button|radio|cell] 显示模式(默认：radio)
	 * @value button 按钮样式
	 * @value radio 单选框模式
	 * @value cell 列表模式
	 * @property {Boolean} border 是否显示边框(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {String} modelValue 双向绑定的值
	 * @event {Function} change 选中状态化生变化时触发
	 */
	import { CommonProps, useTuiThemes, RadioGroupAttrsType } from '../../common/props/index.uts';
	interface RadioGroupProps extends CommonProps {
		modelValue : string;
		childClass : string;
		transition : boolean;
		duration : number;
		labelClass : string;
		icon : string;
		iconBoxClass : string;
		activeClass : string;
		inactiveClass : string;
		iconClass : string;
		activeIconClass : string;
		inactiveIconClass : string;
		activeLabelClass : string;
		inactiveLabelClass : string;
		mode : string;
		border : boolean;
		path : string;
		hover : boolean;
		type : string;
		disabled : boolean;
		stop : boolean;
		effect : string;
		size : string;
		mainClass : string;
		nativeClass : string;
	}

	const props = withDefaults(defineProps<RadioGroupProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		modelValue: "",
		childClass: "",
		transition: false,
		duration: 200,
		labelClass: "",
		icon: 'check-fill',
		iconBoxClass: '',
		activeClass: '',
		inactiveClass: '',
		iconClass: '',
		activeIconClass: '',
		inactiveIconClass: '',
		activeLabelClass: '',
		inactiveLabelClass: '',
		mode: 'radio',
		border: true
	});

	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['click', 'change', 'update:modelValue'])
	const childValue = ref<string>(props.modelValue)
	const itemValidate = inject<() => void>('itemValidate', () => { })
	provide('childValue', childValue)

	watch(childValue, (val : string) => {
		emit('change', val)
		emit('update:modelValue', val)
	})

	provide('RadioGroupAttrs', {
		path: toRef<string>(() : string => props.path),
		hover: toRef<boolean>(() : boolean => props.hover),
		type: toRef<string>(() : string => props.type),
		disabled: toRef<boolean>(() : boolean => props.disabled),
		stop: toRef<boolean>(() : boolean => props.stop),
		effect: toRef<string>(() : string => props.effect),
		size: toRef<string>(() : string => props.size),
		mainClass: toRef<string>(() : string => props.mainClass),
		nativeClass: toRef<string>(() : string => props.nativeClass),
		modelValue: toRef<string>(() : string => props.modelValue),
		childClass: toRef<string>(() : string => props.childClass),
		transition: toRef<boolean>(() : boolean => props.transition),
		duration: toRef<number>(() : number => props.duration),
		labelClass: toRef<string>(() : string => props.labelClass),
		icon: toRef<string>(() : string => props.icon),
		iconBoxClass: toRef<string>(() : string => props.iconBoxClass),
		activeClass: toRef<string>(() : string => props.activeClass),
		inactiveClass: toRef<string>(() : string => props.inactiveClass),
		iconClass: toRef<string>(() : string => props.iconClass),
		activeIconClass: toRef<string>(() : string => props.activeIconClass),
		inactiveIconClass: toRef<string>(() : string => props.inactiveIconClass),
		activeLabelClass: toRef<string>(() : string => props.activeLabelClass),
		inactiveLabelClass: toRef<string>(() : string => props.inactiveLabelClass),
		mode: toRef<string>(() : string => props.mode),
		border: toRef<boolean>(() : boolean => props.border)
	} as RadioGroupAttrsType)

	watch(() : string => props.modelValue, (e : string) => {
		childValue.value = e
	})
	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (props.path != '') {
			uni.navigateTo({
				url: props.path,
				fail: (_) => {
					uni.switchTab({
						url: props.path
					})
				}
			})
		} else {
			emit('click', e)
		}
		itemValidate()
	}
</script>