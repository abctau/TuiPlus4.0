<template>
	<t-gesture v-bind="extendsAttrs" :main-class="`w-100% oh cur ${mainClass}`" @tuiTouchstart="touchstart"
		@tuiTouchmove="touchmove" @tuiTouchend="touchend">
		<t-view :main-class="`fl faic ov ${contentPos}`">
			<t-view main-class="w-100%">
				<slot></slot>
			</t-view>
			<t-view @initFinished="initFinished" main-class="h-100%">
				<slot name="buttons"></slot>
			</t-view>
		</t-view>
	</t-gesture>
</template>
<script setup>
	import { TuiTouchEvent } from '@/uni_modules/tui-plus'
	/**
	 * SwipeAction 左滑操作栏
	 * @date 2025-05-31 12:07:31
	 * @author TanYuan
	 * @description 向右滑动来显示隐藏的操作按钮,向左滑动关闭选项
	 * @example /pagesA/layout/swipe-action/swipe-action
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-swipe-action.html
	 * @example /pagesA/layout/swipe-action/swipe-action
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Boolean} state 操作项的值，控制操作栏是否展开
	 * @value true 是
	 * @value false 否
	 * @event {Function} change 当操作栏展开或收起时触发
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface SwipeActionProps extends CommonProps {
		state : boolean
	}
	const props = withDefaults(defineProps<SwipeActionProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		state: false
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['change'])
	const contentPos = ref<string>('')
	const buttonW = ref<number>(0)
	const startX = ref<number>(0)
	const translateX = ref<number>(0)
	const moveX = ref<number>(0)
	function touchstart(e : TuiTouchEvent) {
		startX.value = e.x
	}
	function touchmove(e : TuiTouchEvent) {
		e.event.preventDefault()
		const x = e.x
		translateX.value = x - startX.value + moveX.value
		if (translateX.value > 0) translateX.value = 0
		if (translateX.value < -buttonW.value) translateX.value = -buttonW.value
		const mx = translateX.value < 0 ? `n${translateX.value * -1}px` : `${translateX.value}px`
		contentPos.value = `attx-${mx}`
	}
	function touchend(e : TuiTouchEvent) {
		const x = e.x
		const dif = x - startX.value
		if (dif > 0) {
			contentPos.value = `attx-0px atp-tr atd-500`
			moveX.value = 0
			emit('change', false)
		} else if (dif < 0) {
			contentPos.value = `attx-n${buttonW.value}px atp-tr atd-500`
			moveX.value = -buttonW.value
			emit('change', true)
		}
	}
	function initFinished(rect : NodeInfo) {
		buttonW.value = Math.floor(rect.width!)
		nextTick(() => {
			if (props.state) {
				moveX.value = -buttonW.value
				emit('change', true)
				const mx = moveX.value < 0 ? `n${moveX.value * -1}px` : `${moveX.value}px`
				contentPos.value = `attx-${mx} atp-tr atd-500`
			}
		})
	}
</script>