<template>
	<t-form v-bind="$props" ref="ruleForm" :model="forms">
		<template v-for="(item,index) in options" :key="index">
			<t-form-item v-bind="item['itemAttrs']" :label="`${item['label']}`" :prop="`${item['name']}`">
				<slot :item="item" :index="index">
					<t-form-dynamic-content :item="item" :forms="forms"></t-form-dynamic-content>
				</slot>
			</t-form-item>
		</template>
	</t-form>
</template>
<script setup>
	/**
	 * FormDynamic 动态表单
	 * @date 2025-05-31 12:03:32
	 * @author TanYuan
	 * @description JSON版的动态表单。根据后端配置生成表单填写。支持多种配置，包括表单字段选项、表单值、校验规则等
	 * @example /pagesA/form/dynamic/dynamic
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-form-dynamic.html
	 * @example /pagesA/form/dynamic/dynamic
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {UTSJSONObject[]} options 动态表单的配置(默认：[])
	 * @property {UTSJSONObject} forms 绑定表单的值
	 * @property {UTSJSONObject} rules 校验规则配置(默认：{})
	 * @property {Boolean} showLabel 是否显示header(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {String} direction=[row|column] 表单的布局的方向(默认：row)
	 * @value row flex 横向而已
	 * @value column flex 纵向布局
	 * @property {String} rulesClass 规则样式
	 * @property {String} labelClass 标签样式
	 * @property {String} childClass 统一设置子组件样式，如果子组件有自己的样式则合并，优先级低于子组件。
	 * @property {String} requiredAsterisk 必填时的提示符 如*(默认：*)
	 * @property {String} requiredAsteriskClass 必填提示符的样式(默认：mt-10)
	 * @property {Boolean} hideRequiredAsterisk 隐藏必填提示符
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} showMessage 是否显示验证信息(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Boolean} bottomLine 是否显示底部线条
	 * @value true 是
	 * @value false 否
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface FormDynamecProps extends CommonProps {
		options : Array<UTSJSONObject>;
		forms : UTSJSONObject;
		rules : UTSJSONObject;
		showLabel : boolean;
		direction : string;
		rulesClass : string;
		labelClass : string;
		childClass : string;
		requiredAsterisk : string;
		requiredAsteriskClass : string;
		hideRequiredAsterisk : boolean;
		showMessage : boolean;
		bottomLine : boolean;
	}

	const props = withDefaults(defineProps<FormDynamecProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		options: [] as Array<UTSJSONObject>,
		forms: {} as UTSJSONObject,
		rules: {} as UTSJSONObject,
		showLabel: true,
		direction: 'row',
		rulesClass: '',
		labelClass: '',
		childClass: '',
		requiredAsterisk: '*',
		requiredAsteriskClass: 'mt-10',
		hideRequiredAsterisk: false,
		showMessage: true,
		bottomLine: false,
	});
	const ruleForm = ref<ComponentPublicInstance | null>(null)
	function validate() : boolean {
		return ruleForm.value?.$callMethod('validate') as boolean
	}
	function reset() {
		ruleForm.value?.$callMethod('reset')
	}
	defineExpose({
		validate,
		reset
	})
</script>