<template>
	<t-view v-bind="extendsAttrs" :main-class="`${mainClass}`">
		<t-popup direction="bottom" ref='popupbottom' :show-footer="true" :closeable="false" @cancel="defCancel"
			@confirm="defConfirm" v-bind="popupAttrs">
			<t-view main-class="fv">
				<t-view main-class="fl h-100 fjcb faic plr-20">
					<t-text :hover="true" main-class="sfwb" @click="colorCancel">取消</t-text>
					<t-text main-class="sfwb">颜色选择器</t-text>
					<t-text :hover="true" @click="colorConfirm" main-class="sfwb" :type="type">确认</t-text>
				</t-view>
				<t-color main-class="" :modelValue="colorValue" @change="colorChange"></t-color>
			</t-view>
		</t-popup>
		<t-view @click="show">
			<slot>
				<t-col :main-class="dynamicColorStyles">
					<t-icon name="arrow-down" :main-class="dynamicIconStyles"></t-icon>
				</t-col>
			</slot>
		</t-view>
	</t-view>
</template>

<script setup>
	/**
	 * PickerColor 颜色面版
	 * @date 2025-05-31 12:05:25
	 * @author TanYuan
	 * @description 是一个颜色选择器，从调色板中选择颜色。
	 * @example /pagesA/basics/color-picker/color-picker
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-picker-color.html
	 * @example /pagesA/basics/color-picker/color-picker
	 * @property {String} size=[large|medium|small|mini] 组件尺寸
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} modelValue 绑定的颜色值(默认：#F44336)
	 * @property {String} title 标题(默认：日历)
	 * @property {String} titleClass 标题文本样式
	 * @property {String} label 标签(默认：请选择日期)
	 * @property {String} labelClass 标签样式
	 * @property {String} buttonClass 按钮样式
	 * @property {String} buttonIconClass 按钮图标样式
	 * @property {UTSJSONObject} popupAttrs 支持t-popup的所有属性 
	 * @event {Function} confirm 点击确认按钮时触发 返回当前面版的值
	 * @event {Function} change 值发生变化时触发
	 * @event {Function} cancel 点击取消按钮时触发
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface ViewProps extends CommonProps {
		modelValue : string
		buttonClass : string
		buttonIconClass : string
		popupAttrs : UTSJSONObject
	}
	const props = withDefaults(defineProps<ViewProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		modelValue: '#F44336',
		buttonClass: '',
		buttonIconClass: '',
		popupAttrs: {} as UTSJSONObject
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['confirm', 'change', 'cancel', 'update:modelValue'])
	const instance = getCurrentInstance()?.proxy!
	const colorValue = ref<string>('')
	const cacheColorValue = ref<string>('')
	const popupbottom = ref<ComponentPublicInstance | null>(null)
	
	let timer : number = 0
	watch(() : string => props.modelValue, (val : string) => {
		colorValue.value = val
	}, { immediate: true })

	const dynamicColorStyles = computed(() : string => {
		let sty : string = 'fc tdr twh-70 r-4 '
		sty += `bg-${colorValue.value == '' ? '#ffffff' : colorValue.value}`
		sty += ` ${props.buttonClass}`
		return sty
	})
	const dynamicIconStyles = computed(() : string => {
		return `c-#fff s-34 ${props.buttonIconClass}`
	})
	
	function show() {
		popupbottom.value?.$callMethod('show')
	}
	function colorChange(e : string) {
		emit('change', e)
		clearTimeout(timer)
		timer = setTimeout(() => {
			cacheColorValue.value = e
		}, 500)
	}
	function defCancel() {
		emit('cancel')
	}
	function colorCancel() {
		emit('cancel')
		show()
	}
	function defConfirm() {
		colorValue.value = cacheColorValue.value
		emit('update:modelValue', colorValue.value)
		emit('confirm', colorValue.value)
	}
	function colorConfirm() {
		colorValue.value = cacheColorValue.value
		emit('update:modelValue', colorValue.value)
		emit('confirm', colorValue.value)
		show()
	}

	onUnmounted(() => {
		clearTimeout(timer)
	})
</script>