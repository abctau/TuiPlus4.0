<template>
	<t-view v-bind="extendsAttrs" :main-class="`${mainClass}`">
		<t-row :main-class="`faic h-100 tdb r-1000 b-2px,s,${isFocus?getBorderToValue:'transparent'}`">
			<t-input prefix-icon="search" prefix-class="sfwb s-40 mt-5" type="info" effect="plain" input-class="s-30"
				v-model="val" clear-class="s-34 sfwb" @blur="blur" @focus="focus" main-class="f r-150 plr-30"
				size="mini" :placeholder="placeholder"></t-input>
			<t-button @click="onsearch" v-bind="extendsAttrs" main-class="r-1000  m-10 w-140 ocr">搜索</t-button>
		</t-row>
		<t-view main-class="tdr tdb tdp-l mtb-30" v-if="historySearch.length>0">
			<t-text size="large" main-class="sfwb">{{historyTitle}}</t-text>
			<t-row main-class="fww ptp-30">
				<template v-for="(item,index) in historySearch" :key="index">
					<t-button type="info" v-if="index<maxHistoryCount" main-class="r-1000 mrb-30 c-#666"
						@click="select('history',item)" effect="light">{{item}}</t-button>
				</template>
			</t-row>
		</t-view>
		<t-view main-class="tdr tdb tdp-l" v-if="historySearch.length>0">
			<t-text size="large" main-class="sfwb">{{hotTitle}}</t-text>
			<t-row main-class="fww ptp-30">
				<template v-for="(item,index) in hotSearches" :key="index">
					<t-button type="info" v-if="index<maxHotCount" main-class="r-1000 mrb-30 c-#666"
						@click="select('hot',item)" effect="light">{{item}}</t-button>
				</template>
			</t-row>
		</t-view>
	</t-view>
</template>

<script setup>
	/**
	 * Search 搜索框
	 * @date 2025-05-31 12:06:38
	 * @author TanYuan
	 * @description 简易搜索框
	 * @example /pagesA/form/search/search
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-search.html
	 * @example /pagesA/form/search/search
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} placeholder 输入框为空时占位符(默认：请输入)
	 * @property {String} content 搜索的内容
	 * @event {Function} search 点搜索时触发
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface SearchProps extends CommonProps {
		placeholder : string
		content : string
		maxHistoryCount : number
		maxHotCount : number
		historySearch : string[]
		hotSearches : string[]
		historyTitle : string
		hotTitle : string
	}
	const props = withDefaults(defineProps<SearchProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		placeholder: '请输入',
		content: '',
		maxHistoryCount: 5,
		historySearch: [] as string[],
		maxHotCount: 5,
		hotSearches: [] as string[],
		historyTitle: '历史搜索',
		hotTitle: '热门搜索'
	});
	const { extendsAttrs, getBorderToValue } = useTuiThemes(props)
	const emit = defineEmits(['search', 'select'])
	const val = ref<string>(props.content)
	const isFocus = ref<boolean>(false)
	function onsearch() {
		if (val.value != '') {
			props.historySearch.unshift(val.value)
			emit('search', val.value)
		}
	}
	function focus() {
		isFocus.value = true
	}
	function blur() {
		isFocus.value = false
	}
	function select(type : string, value : string) {
		emit('select', { type, value })
	}
</script>