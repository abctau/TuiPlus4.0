<template>
	<slot :times="formatTimes">
		<t-text v-bind="extendsAttrs" mode="time" :format='format' :text="`${timers}`"></t-text>
	</slot>
</template>

<script setup>
	/**
	 * CountDown 倒计时
	 * @date 2025-05-31 12:02:48
	 * @author TanYuan
	 * @description 倒计时组件用于在界面上显示一个倒计时，可以自定义倒计时格式和持续时间。它的功能亮点包括：支持开始、暂停和继续倒计时，以及停止倒计时。使用场景包括：活动倒计时、商品促销倒计时、会议倒计时等。组件还提供了插槽，允许自定义倒计时显示内容。
	 * @example /pagesA/layout/count-down/count-down
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-count-down.html
	 * @example /pagesA/layout/count-down/count-down
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Number} time undefined
	 * @property {String} format undefined(默认：hh:MM:ss)
	 * @event {Function} start 开始倒计时触发
	 * @event {Function} stop 停止倒计时触发
	 * @event {Function} pause 暂停时触发
	 * @event {Function} continues 继续计时时触发
	 * @event {Function} change 倒计时变化时触发的事件	
	 */

	import { objTimeData } from '../../common/model/formart'
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface CountDownProps extends CommonProps {
		time : number
		format : string
	}
	const props = withDefaults(defineProps<CountDownProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		time: 0,
		format: 'hh:MM:ss'
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['start', 'stop', 'pause', 'continues', 'change'])
	let timer : number = 0
	const timers = ref(0)
	function play() {
		clearInterval(timer)
		timer = setInterval(() => {
			timers.value = (timers.value - 1000)
			if (timers.value == 0) clearInterval(timer)
			emit('change', timers.value)
		}, 1000)
	}
	function pause() {
		clearInterval(timer)
		emit('pause')
	}
	function continues() {
		play()
		emit('continues')
	}
	function stops() {
		timers.value = props.time
		clearInterval(timer)
		emit('stop')
	}
	function start() {
		timers.value = props.time
		play()
		emit('start')
	}
	start()
	const formatTimes = computed(() => {
		return objTimeData(timers.value)
	})
	onUnmounted(() => {
		clearInterval(timer)
	})
	defineExpose({
		pause,
		continues,
		stops,
		start,
	})
</script>