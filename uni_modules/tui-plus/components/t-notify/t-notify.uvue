<template>
	<t-view v-bind="extendsAttrs" :main-class="`ope-n ${mainClass}`">
		<template v-for="(item,index) in list" :key="index">
			<t-view @transitionend="transitionend"
				:main-class="`atp-o ope-n atd-${item.duration} o-${`${item.opacity}`}`">
				<slot>
					<t-button :left-icon="item.icon" :type="item.type" :size="item.size" main-class="mb-30">
						{{`${item['text']}`}}
					</t-button>
				</slot>
			</t-view>
		</template>
	</t-view>
</template>

<script setup>
	/**
	 * Notify 消息通知
	 * @date 2025-05-31 12:05:02
	 * @author TanYuan
	 * @description 消息通知组件，用于在页面上显示通知消息，支持配置消息类型、文本、持续时间等。
	 * @example /pagesA/basics/notify/notify
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-notify.html
	 * @example /pagesA/basics/notify/notify
	 * @property {String} size=[large|medium|small|mini] 组件尺寸
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：info)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 */
	import { TuiGuid, getJSONString } from '../../common/model/util'
	type NotifyContent = {
		type : string
		text : string
		duration : number
		tid : string
		tim : number
		size : string
		icon : string
		color : string
		backgroundColor : string
		opacity : number
	}
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	const props = withDefaults(defineProps<CommonProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
	});
	const { extendsAttrs } = useTuiThemes(props)
	const list = ref<NotifyContent[]>([])
	function transitionend() {
		for (let i = list.value.length - 1; i >= 0; i--) {
			const item = list.value[i]
			if (item.opacity == 0) {
				nextTick(() => {
					list.value.splice(i, 1)
				})
			}
		}
	}
	function add(option : UTSJSONObject) {
		let tid : string = TuiGuid(20)
		const duration = parseInt(`${option['duration']}`)
		function clearTidFun(id : string, t : number) {
			const index = list.value.findIndex((item : NotifyContent) => item.tid == id)
			if (index > -1) {
				list.value[index].opacity = 0
			}
			clearTimeout(t)
		}
		let tim : number = 0
		tim = setTimeout(() => {
			clearTidFun(tid, tim)
		}, duration)

		if (list.value.length == 0) {
			list.value.push({
				type: `${option['type']}`,
				text: `${option['text']}`,
				duration,
				tid,
				tim,
				size: getJSONString(option, 'size', 'large'),
				icon: getJSONString(option, 'icon'),
				color: getJSONString(option, 'color'),
				backgroundColor: getJSONString(option, 'backgroundColor'),
				opacity: 1
			} as NotifyContent)
		} else {
			list.value.unshift({
				type: `${option['type']}`,
				text: `${option['text']}`,
				duration,
				tid,
				tim,
				size: getJSONString(option, 'size', 'large'),
				icon: getJSONString(option, 'icon'),
				color: getJSONString(option, 'color'),
				backgroundColor: getJSONString(option, 'backgroundColor'),
				opacity: 1
			} as NotifyContent)
		}
	}

	defineExpose({ add })
</script>