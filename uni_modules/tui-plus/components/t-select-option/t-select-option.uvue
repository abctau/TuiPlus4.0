<template>
	<t-view v-bind="extendsAttrs" :disabled="disabled" :hover="true" :main-class="`fl ${mainClass}`"
		@click="mainOnclick">
		<t-row :main-class='selectItemBox'>
			<t-text v-bind="extendsAttrs" main-class="" :type="checked?textTypeFormart:''" :text="label"></t-text>
			<t-radio v-bind="extendsAttrs" :checked="checked" :type="checked?textTypeFormart:''"
				icon-box-class="mr-0 p-0" main-class='p-0'></t-radio>
		</t-row>
	</t-view>
</template>

<script setup>
	/**
	 * SelectOption 下拉选择
	 * @date 2025-05-31 12:06:47
	 * @author TanYuan
	 * @description 下拉选择子级的
	 * @example /pagesA/form/select/select
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-select-option.html
	 * @example /pagesA/form/select/select
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：l)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：primary)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} value 选项的值
	 * @property {String} label 选项的标签文本
	 * @event {Function} click 点击时触发
	 */
	import { CommonProps, SelectProps, useTuiThemes, SelectAttrsType } from '../../common/props/index.uts';
	interface SelectOptionProps extends CommonProps {
		value : string
		label : string
	}
	const props = withDefaults(defineProps<SelectOptionProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		value: '',
		label: ''
	});
	const emit = defineEmits(['click'])

	const provideModelValue = inject<Ref<UTSJSONObject>>('provideModelValue')
	const selectAttrs = inject<SelectAttrsType>('selectAttrs')
	const childChange = inject<(state : boolean, value : string, key : string) => void>('childChange')
	const registerChildmethod = inject<(key : string, value : string) => void>('registerChildmethod')
	if (registerChildmethod != null) registerChildmethod(props.value, props.label)
	const extendsAttrs = computed(() : UTSJSONObject => {
		return {
			path: selectAttrs?.path?.value,
			hover: selectAttrs?.hover?.value,
			type: selectAttrs?.type?.value,
			disabled: selectAttrs?.disabled?.value,
			stop: selectAttrs?.stop?.value,
			effect: selectAttrs?.effect?.value,
			size: selectAttrs?.size?.value,
			mainClass: selectAttrs?.mainClass?.value,
			nativeClass: selectAttrs?.nativeClass?.value
		}
	})
	const textTypeFormart = computed(() : string => {
		return selectAttrs?.type?.value ?? 'p'
	})
	const checked = computed(() : boolean => {
		let b : boolean = false
		let val : any = provideModelValue?.value?.get('modelValue') ?? ''
		if (typeof (val) == 'string') {
			if (val == props.value) b = true
		} else {
			b = (val as string[]).includes(props.value)
		}
		return b
	})
	const selectItemBox = computed(() : string => {
		return `tdp f faic fjcb`
	})

	function mainOnclick(e : UniPointerEvent) {
		if (props.stop) e.stopPropagation()
		if (childChange != null) childChange(checked.value, props.label, props.value)
	}
</script>