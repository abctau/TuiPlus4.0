<template>
	<t-view v-bind="extendsAttrs" :main-class="`ov tdr ${mainClass}`">
		<t-row :main-class="`z-3000 tvg ${activeIndex==-1?'tdr':'tdr-m,,12'}`" :touch-stop="true">
			<t-row main-class="tdp f fc" v-for="(item,index) in childs" :key="index" @click="show(index)">
				<t-text :type="index==activeIndex?type:''">{{item}}</t-text>
				<t-view :main-class="`atp-tr atd-100 twh-40 fc atr-180 mt-8 ${index==activeIndex?'atr-0':'atr-180'}`">
					<t-icon name="arrow-up-s-fill" size="large" type="info" main-class="slh-40"></t-icon>
				</t-view>
			</t-row>
		</t-row>
		<t-view main-class="z-1000 ov" :touch-stop="true">
			<slot></slot>
		</t-view>
		<t-view main-class="df dlt-0 twh-100% bg-rgba(0,0,0,0) z-999" v-if="activeIndex!=-1" @click="activeIndex=-1"
			:touch-stop="true">

		</t-view>
	</t-view>
</template>

<script setup>
	/**
	 * DropdownMenu 下拉菜单
	 * @date 2025-08-14 18:50:14
	 * @author TanYuan
	 * @description 菜单呈现数个并列的选项类目，用于页面的内容筛选、排序等操作。
	 * @example /pagesA/layout/dropdown-menu/dropdown-menu.uvue
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-dropdown-menu.html
	 * @example /pagesA/layout/dropdown-menu/dropdown-menu.uvue
	 * @property {String} size=[large|medium|small|mini] 组件尺寸 (默认:medium)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型 (默认: "")
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果（点击组件透明度0.7）(默认: false)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Number} maxHeight 选项最大高度。设计高度后内容支持滚动(默认：1)
	 * @property {UTSJSONObject} model 绑定的表单对象(默认：{})
	 * @event {Function} select 选中时触发 
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface DropDownMenuProps extends CommonProps {
		maxHeight : number
		model : UTSJSONObject
	}
	const props = withDefaults(defineProps<DropDownMenuProps>(), {
		path: '',
		hover: false,
		type: 'p',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		maxHeight: -1,
		model: {} as UTSJSONObject
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['select'])
	const childs = ref<string[]>([])
	const total = ref<number>(0)
	const activeIndex = ref<number>(-1)
	provide('total', total)
	provide('childs', childs)
	provide('activeIndex', activeIndex)
	provide('maxHeight', toRef<number>(() : number => props.maxHeight))
	provide('partenType', toRef<string>(() : string => props.type))
	provide('formdata', toRef<UTSJSONObject>(() : UTSJSONObject => props.model))
	provide('onchange', () => {
		emit('select', props.model)
	})
	function close() {
		activeIndex.value = -1
		emit('select', props.model)
	}
	function show(e : number) {
		activeIndex.value = activeIndex.value == e ? -1 : e
	}
	defineExpose({
		close
	})
</script>