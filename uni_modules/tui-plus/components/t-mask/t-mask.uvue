<template>
	<t-view v-if="open" v-bind="extendsAttrs"
		:main-class="`df twh-100% dl-0 dt-0 z-999 bg-rgba(0,0,0,0.8) attf-eo ${transition?'atp-o attf-eio atd-'+duration:''} o-${opacity} ${mainClass}`"
		@click="maskClick" @transitionend="transitionend">
		<slot></slot>
	</t-view>
</template>

<script setup>
	/**
	 * Mask 遮罩层
	 * @date 2025-05-31 12:04:47
	 * @author TanYuan
	 * @description  遮罩组件，轻巧覆盖于页面之上，有效锁定用户焦点，确保重要内容得以凸显和专注。
	 * @example /pagesA/basics/mask/mask
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-mask.html
	 * @example /pagesA/basics/mask/mask
	 * @property {String} size=[large|medium|small|mini] 组件尺寸
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：p)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false) 
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {Boolean} transition 是否显示动画(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {Number} duration 动画的时间 单位ms(默认：500)
	 * @event {Function} change 状态发生变化时触发
	 */

	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface MaskProps extends CommonProps {
		transition : boolean
		duration : number
	}
	const props = withDefaults(defineProps<MaskProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		transition: true,
		duration: 500
	});
	const { extendsAttrs } = useTuiThemes(props)
	const emit = defineEmits(['change', 'update:modelValue'])
	const open = ref<boolean>(false)
	const opacity = ref<number>(0)
	let timer : number = 0
	function show() {
		const val = !open.value
		emit('change', open.value)
		if (props.transition) {
			if (val) {
				open.value = true
				opacity.value = 0
				nextTick(() => {
					clearTimeout(timer)
					timer = setTimeout(() => {
						opacity.value = 1
					}, 100)
				})
			} else {
				opacity.value = 0
			}
		} else {
			if (val) {
				opacity.value = 1
				open.value = true
			} else {
				opacity.value = 0
				open.value = false
			}
		}
	}
	function maskClick() {
		show()
	}
	function transitionend() {
		if (opacity.value == 0) open.value = false
	}
	onUnmounted(() => {
		clearTimeout(timer)
	})
	defineExpose({ show })
</script>