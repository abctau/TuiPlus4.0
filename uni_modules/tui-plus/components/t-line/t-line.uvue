<template>
	<t-view v-bind="extendsAttrs" :main-class="lineStyles">
		<slot></slot>
	</t-view>
</template>
<script setup>
	/**
	 * Line 线条
	 * @date 2025-05-31 12:04:28
	 * @author TanYuan
	 * @description 线条组件，用于绘制线条，支持多种配置，包括线条大小、长度、方向、是否为细边框以及边框样式。
	 * @example /pagesA/basics/line/line
	 * @tutorial https://life.yundie.xyz/tui3.0/docs/component/t-line.html
	 * @example /pagesA/basics/line/line
	 * @property {String} size=[large|medium|small|mini] 组件尺寸(默认：mini)
	 * @value large 大尺寸，按钮的尺寸较大，适用于需要强调操作或易于点击的区域。
	 * @value medium 中尺寸，按钮的尺寸适中，可能是默认尺寸，适用于大多数场景。
	 * @value small 小尺寸，按钮的尺寸较小，适用于空间有限或操作不是特别重要的区域。
	 * @value mini 迷你，按钮的尺寸最小，适用于紧凑布局或辅助操作。
	 * @property {String} type=[info|primary|error|warning|success] 组件类型(默认：s)
	 * @value info 信息提示场景，通常用于提供一般的通知信息，不涉及特别的重要性或紧急性。
	 * @value primary 正常使用场景，可能用于强调某些主要的操作或信息，比如主要的按钮或导航链接。
	 * @value error 错误提示场景，用于指示出现了错误或问题，需要用户的注意。
	 * @value warning 警告提示场景，用于提示用户关于潜在的问题或需要注意的事项。
	 * @value success 成功提示场景，用于指示一个操作或过程已经成功完成。
	 * @property {Boolean} disabled=[false|true] 组件是否禁用(默认: false)
	 * @property {Boolean} stop=[false|true] 是否阻止事件冒泡（Tui统一写法处理事件冒泡）(默认: false)
	 * @property {Boolean} hover=[false|true] 是否有点击效果(默认：true)
	 * @property {String} path 点击组件后跳转的页面路径，如果为空则响应点击事件，如果不为空则跳转页面不会响应单击事件。(默认: "")
	 * @property {String} mainClass 组件根节点的样式。(默认: "")
	 * @property {String} nativeClass 组件根节点原生样式。(默认: "")
	 * @property {String} effect=[normal|dark|light|plain] 组件显示主题(默认 "normal")
	 * @value normal 正常
	 * @value dark 深色
	 * @value light 浅色
	 * @value plain 镂空
	 * @property {String} lineSize 线条的粗细(默认：1px)
	 * @property {String} length 线条的长度(默认：auto)
	 * @property {String} direction=[row|column] 线条的方向(默认：row)
	 * @value row 横向
	 * @value column 纵向
	 * @property {Boolean} hairline 是否使用细线条0.5px(默认：true)
	 * @value true 是
	 * @value false 否
	 * @property {String} lineStyle=[solid|dashed|dotted'|double] 线条的类开(默认：solid)
	 * @value solid 实心
	 * @value dashed 虚线
	 * @value dotted' 点状线
	 * @value double 双横线
	 */
	import { CommonProps, useTuiThemes } from '../../common/props/index.uts';
	interface LineProps extends CommonProps {
		lineSize : string
		length : string
		direction : string
		hairline : boolean
		lineStyle : string
	}
	const props = withDefaults(defineProps<LineProps>(), {
		path: '',
		hover: false,
		type: '',
		disabled: false,
		stop: false,
		effect: '',
		size: '',
		mainClass: '',
		nativeClass: '',
		lineSize: '1px',
		length: 'auto',
		direction: 'row',
		hairline: true,
		lineStyle: 'solid'
	});
	const { extendsAttrs, getBorderToValue } = useTuiThemes(props)
	const lineStyles = computed(() : string => {
		let sty : string = ''
		const len = props.length == 'auto' ? '100%' : props.length
		if (props.direction == 'row') {
			if (props.hairline) sty += 'atsy-0.5 '
			sty += `w-${len} bbw-${props.lineSize} bbs-${props.lineStyle} bbc-${getBorderToValue.value}`
		} else {
			if (props.hairline) sty += 'atsx-0.5 '
			sty += `h-${len} blw-${props.lineSize} bls-${props.lineStyle} blc-${getBorderToValue.value}`
		}
		return `${sty} ${props.mainClass}`
	})
</script>